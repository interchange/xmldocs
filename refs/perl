__NAME__ purpose
evaluate embedded Perl code
__END__

__NAME__ synopsis
<row>
	<entry>
	<group choice='plain'>
		<arg choice='plain'>tables</arg>
		<arg choice='plain'>table</arg>
	</group>
	</entry>
	<entry>
	Yes
	</entry>
	<entry>
	No
	</entry>
	<entry>
	<!-- DFL -->
	</entry>
	<entry>
	<!-- DSC -->
	</entry>
</row> 
<row>
	<entry>
	subs
	</entry>
	<entry>
	</entry>
	<entry>
	</entry>
	<entry>
	0
	</entry>
	<entry>
	imports subroutines defined by &conf-Sub;
	</entry>
</row> 
<row>
	<entry>
	short_errors
	</entry>
	<entry>
	</entry>
	<entry>
	</entry>
	<entry>
	0
	</entry>
	<entry>
	log error message only
	</entry>
</row> 
<row>
	<entry>
	no_return
	</entry>
	<entry>
	</entry>
	<entry>
	</entry>
	<entry>
	0
	</entry>
	<entry>
	store result into &glos-session; key <literal>mv_perl_result</literal> instead of returning it
	</entry>
</row> 
&TAG_CONTAINER;
__END__

__NAME__ description
Evaluate embedded Perl code and return the result.
__END__

__NAME__ see also
calc, mvasp
__END__

__NAME__ notes
<!-- if you change this, also change the same in refs/calc -->
The &tag-calc; tag is lower-overhead variant of &tag-perl;, because it
does not accept arguments, does not try to interpolate tag body, does not
pre-open any database tables, and it doesn't do any extra wrapping.
</para><para>
The &tag-calc; tag will remember variable values inside the page, so you
can do the equivalent of a memory store and memory recall for a loop. In 
other words, variables you initialize or set in one &tag-calc; block are
also visible in all further &tag-calc; blocks on the same page. 
</para><para>
There is no reason to ever use this tag inside &tag-perl; or &tag-mvasp;.
__END__
