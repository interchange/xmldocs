
TODO
	      By  default,  the  width and height are maximum values. That is,
	      the image is expanded or contracted to fit the width and	height
	      value while maintaining the aspect ratio of the image. Append an
	      exclamation point to the geometry to force  the  image  size  to
	      exactly  the  size  you  specify.  For  example,	if you specify
	      640x480! the image width is set to 640 pixels and height to 480.


	      If  only the width is specified, the width assumes the value and
	      the height is chosen to maintain the aspect ratio of the	image.
	      Similarly,  if  only  the  height  is specified (e.g., -geometry
	      x256), the width is chosen to maintain the aspect ratio.


	      To specify a percentage width or height instead, append  %.  The
	      image  size is multiplied by the width and height percentages to
	      obtain the final image dimensions. To increase the  size	of  an
	      image,  use a value greater than 100 (e.g. 125%). To decrease an
	      image's size, use a percentage less than 100.


	      Use @ to specify the maximum area in pixels of an image.


	      Use > to change the dimensions of the image only if its width or
	      height  exceeds  the geometry specification. < resizes the image
	      only if both of its dimensions are less than the geometry speci-
	      fication.  For  example, if you specify '640x480>' and the image
	      size is 256x256, the image size does not change. However, if the
	      image  is  512x512  or  1024x1024,  it  is  resized  to 480x480.
	      Enclose the geometry specification in quotation marks to prevent
	      the  < or > from being interpreted by your shell as a file redi-
	      rection.



__NAME__ purpose
general purpose tag for generating HTML &lt;img&gt; tags
__END__

__NAME__ missing
Finish examples
__END__

__NAME__ synopsis2
<row>
	<entry><arg choice='plain'>src</arg></entry>
	<entry>Yes</entry><entry>Yes</entry>
	<entry></entry>
	<entry>
	Image source. Can be a plain product SKU, or just the image basename (so 
	Interchange would probe for existing file formats), or a literal 
	(relative or absolute) URL.
	If Interchange is let to search for file extensions, it will check for
	<literal>.jpg</literal>,
	<literal>.gif</literal>,
	<literal>.png</literal> and
	<literal>.jpeg</literal> in the same order as specified here.
	</entry>
</row>
<row>
	<entry><arg choice='plain'>alt</arg></entry>
	<entry></entry><entry></entry>
	<entry>
	The <database class='field'>description</database> value from the
	<database>products</database> database if SKU is specified instead of
	a literal image filename. Otherwise, none.
	</entry>
	<entry>
	Text to use in the &lt;img&gt;'s <arg choice='plain'>alt</arg> attribute.
	By default, this will be filled with the
	<database class='field'>description</database> from the product database
	if a SKU (not a filename) is provided.
	</entry>
</row>
<row>
	<entry><arg choice='plain'>default</arg></entry>
	<entry></entry><entry></entry>
	<entry>
	[scratch mv_imagedefault], if set.
	</entry>
	<entry>
	Image filename (relative or absolute URL)
	that will be used if no image for the SKU was found.
	</entry>
</row>
<row>
	<entry><arg choice='plain'>descriptionfields</arg></entry>
	<entry></entry><entry></entry>
	<entry>
	<varname>DESCRIPTIONFIELDS</varname> catalog variable
	</entry>
	<entry>
	Whitespace-separated list of fields in the <database>products</database>
	database to pull the description from. This is used for the default
	<arg choice='plain'>alt</arg> and
	<arg choice='plain'>title</arg> attributes.
	</entry>
</row>
<row>
	<entry><arg choice='plain'>dir_only</arg></entry>
	<entry></entry><entry></entry>
	<entry>0
	</entry>
	<entry>
	Only return the value of 
	<option>ImageDir</option> or <option>ImageDirSecure</option> config
	directives? This is primarily used in &glos-js; code to discover the
	appropriate path to prepend to image files.
	</entry>
</row>
<row>
	<entry><arg choice='plain'>exists_only</arg></entry>
	<entry></entry><entry></entry>
	<entry>0
	</entry>
	<entry>
	Only return true if the image exists?
	</entry>
</row>
<row>
	<entry><arg choice='plain'>src_only</arg></entry>
	<entry></entry><entry></entry>
	<entry>0
	</entry>
	<entry>
	Only return the would-be image location, without the surrounding link
	and metadata (alts, titles, etc.)?
	</entry>
</row>
<row>
	<entry><arg choice='plain'>force</arg></entry>
	<entry></entry><entry></entry>
	<entry>0
	</entry>
	<entry>
	Skip any checks on image file (existence, extension, etc.)?
	</entry>
</row>
<row>
	<entry><arg choice='plain'>getsize</arg></entry>
	<entry></entry><entry></entry>
	<entry>1
	</entry>
	<entry>
	Use  <classname>Image::Size</classname> Perl module to determine image
	dimensions and specify them in the &glos-img; tag?
	</entry>
</row>
<row>
	<entry><arg choice='plain'>imagesubdir</arg></entry>
	<entry></entry><entry></entry>
	<entry>[scratch mv_imagesubdir], if set.
	</entry>
	<entry>
	Look for the image files in only one subdirectory of the
	<option>ImageDir</option> or <option>ImageDirSecure</option> config
	directives.
	</entry>
</row>
<row>
	<entry>
		<group choice='opt'>
			<arg choice='plain'>makesize</arg>
			<arg choice='plain'>resize</arg>
			<arg choice='plain'>geometry</arg>
		</group>
	</entry>
	<entry></entry><entry></entry>
	<entry>
	</entry>
	<entry>
	If ImageMagick is installed, you can display an arbitrary size of
	the image, creating it if necessary. This would create a subdirectory
	corresponding to the size, (i.e. "64x48") and copy the source image to it.
	It would then use the <command>mogrify</command> command to resize.
	This requires a writable image directory, of course.
	If not found in the PATH, 
	the location of the <command>mogrify</command> can be defined with the
	<varname>IMAGE_MOGRIFY</varname> variable.
	This would also temporarily set &glos-umask; to 2 during the creation of files
	and directories.
	The value is specified as
	<literal><replaceable>A</replaceable>x<replaceable>B</replaceable></literal>,
	<literal><replaceable>A</replaceable></literal> or
	<literal>x<replaceable>B</replaceable></literal>, followed by up to two
	<literal>+- <replaceable>offset</replaceable></literal> specifications,
	followed by none or one of <literal>%@!&lt;&gt;</literal>.
	For a complete syntax, see <command>mogrify</command>
	<literal>-geometry</literal> parameter.
	</entry>
</row>
<row>
	<entry><arg choice='plain'>check_date</arg></entry>
	<entry></entry><entry></entry>
	<entry>0</entry>
	<entry>
	Track original file's modification time and rebuild the resized image
	when the source file changes? (This only makes sense with 
	<arg choice='plain'>makesize</arg>.)
	</entry>
</row>
<row>
	<entry><arg choice='plain'>secure</arg></entry>
	<entry></entry><entry></entry>
	<entry>
	Same delivery method as for the current page.
	</entry>
	<entry>
	Value of <literal>0</literal> forces <literal>http://</literal> link to
	the file.
	Value of <literal>1</literal> forces <literal>https://</literal>.
	</entry>
</row>
<row>
	<entry><arg choice='plain'>sku</arg></entry>
	<entry></entry><entry></entry>
	<entry>
	</entry>
	<entry>
	Specify this attribute explicitly if you want to first try an image
	from the <database class='field'>image</database> field in the
	<database>products</database> database. If it does not exist, then a 
	fallback to SKU-derived image filenames is performed.
	</entry>
</row>
<row>
	<entry><arg choice='plain'>title</arg></entry>
	<entry></entry><entry></entry>
	<entry>
	Value of the <arg choice='plain'>alt</arg> attribute.
	</entry>
	<entry>
	Text to use for the &glos-img;'s <arg choice='plain'>title</arg>
	attribute. This is supported by newer browsers to provide things like
	rollover tips.
	</entry>
</row>
<row>
	<entry>ui</entry>
	<entry></entry><entry></entry>
	<entry>0
	</entry>
	<entry>
	Set to a true value to use Admin UI image prefixes. In other words, 
	this uses the values of <varname>UI_IMAGE_DIR</varname> and
	<varname>UI_IMAGE_DIR_SECURE</varname> variables instead of the
	<option>ImageDir</option> and <option>ImageDirSecure</option> config
	directives. This option does honor locale settings.
	</entry>
</row>
&ROW_HTML_std;
&ROW_HTML_ext;
&ROW_EXTRA_none;
__END__

__NAME__ description
<tag>image</tag> is a general-purpose tag for generating HTML &lt;img&gt;
tags based on various settings.
</para><para>
It can test whether an image exists,
predetermine dimensions, retrieve image names from the
product database (the <database class='field'>image</database> field),
automatically pull product
descriptions from the database (for <arg choice='plain'>alt</arg> and
<arg choice='plain'>title</arg> attributes).
__END__


__NAME__ notes
This tag makes a lot of assumptions about your setup, and sometimes it 
might not be the best tool for the job.
__END__


__NAME__ example: Simple image
Let's suppose there's a product SKU os29000 present in your 
<database>products</database> database and the
<database class='field'>image</database> field contains value
<literal>os29000.png</literal>. Place the <tag>image</tag> on a test
page:
<programlisting>
[image os29000]
</programlisting>
The tag would produce something like:
<programlisting><![CDATA[
<img src="/standard/images/os29000.png"
      width="120"
      height="150"
      alt="3' Step Ladder"
      title="3' Step Ladder">
]]></programlisting>
__END__

