__NAME__ purpose
specify Perl subroutines to handle certain events or conditions
__END__


__NAME__ synopsis
	<arg choice='plain'><replaceable>event_name</replaceable></arg>
	<arg choice='plain' rep='repeat'><replaceable>subroutine_name</replaceable></arg>
__END__


__NAME__ description
The directive specifies &PERL; subroutines that should be called to
handle certain events.
</para><para>
The available events are:

<itemizedlist>
<listitem><para>
	<literal>request_init</literal> &mdash;
	event triggered on every request, that is, after catalog
	selection and before &glos-session; assignment.
</para></listitem>
<listitem><para>
	<literal>debug_qualify</literal> &mdash; 
	event triggered to determine whether &glos-debug; mode should be
	enabled for the incoming client connection. Have in mind that simple,
	host-based decision can be made by using the &conf-DebugHost; 
	configuration directive. The <literal>debug_qualify</literal>
	specialSub is invoked only if &conf-DebugHost; is either undefined,
	or the client host is found in the &conf-DebugHost; list.
	See &glos-debug; glossary entry for a complete discussion.
</para></listitem>
<listitem><para>
	<literal>flypage</literal> &mdash; 
  event triggered for determining the result set for the flypage.
	<!-- TODO more info -->
</para></listitem>
<listitem><para>
	<literal>guess_cc_type</literal> &mdash; 
  event triggered at the time
  of deriving credit card type, &var-MV_CREDIT_CARD_TYPE;.
	&IC; already recognizes
  major credit card types but local areas might require you to
	write custom recognition code.
  The subroutine is called with the credit card number.
  A &glos-true; return value should contain the recognized credit card
	type name.
	A &glos-false; value indicates that the number recognition did not
	suceed, and that &IC; should proceed with its built-in detection
	algorithm.
</para></listitem>
<listitem><para>
	<literal>init_session</literal> &mdash; 
  event triggered at new &glos-session; creation time.
  The subroutine is called with the pointer to the newly created
  &glos-session; variables space. Subroutine return value is not used.
</para></listitem>
<listitem><para>
	<literal>lockout</literal> &mdash; 
  event triggered for locking out a bad web spider or misbehaving
	client (see &conf-RobotLimit;). The subroutine is called without 
	parameters and is expected to perform all the necessary custom
	steps. It should exit with an appropriate return value to signal
	how the rest of the process should be handled.
  A &glos-true; return value indicates that no more handling is 
	needed. A &glos-false; value indicates that &IC; should continue
	and execute the default, built-in action lockout action, which
	is specified by the &conf-LockoutCommand; config directive.
	<!-- TODO : Where do you read IP or something from ? -->
</para></listitem>
<listitem><para>
	<literal>missing</literal> &mdash; 
  event triggered when a requested &IC; page is missing.
  The subroutine is called with the name of the missing page
	and is expected to perform all the necessary custom handling.
	It should exit with an appropriate return value to signal
	how the rest of the process should be handled.
	A &glos-true; return
  value will indicates that all actions (including the response to the client)
  have been performed by your function and no more handling is needed.
  You can also return an array, (1, <replaceable>PAGENAME</replaceable>), where
	<replaceable>PAGENAME</replaceable> is the page to be displayed to the user.
	A &glos-false; return value indicates that &IC; should continue
	and execute the default, built-in action, which
	is displaying a page specified by "&conf-SpecialPage; 
	<literal>missing</literal>".
</para></listitem>

</itemizedlist>
__END__

__NAME__ notes
If the examples above, the &PERL; subroutines have been defined on a
&glos-catalog; level, using &conf-Sub; configuration directive. 
&IC; catalogs (and everything configured within them) are subject to
&glos-safe; restrictions, so your &conf-Sub; blocks might have
insufficient permissions to execute all of your commands. To solve that
problem, either relax the restrictions by using &conf-SafeUntrap;,
or define the subroutines at the global level (in &gcf;) using
unrestricted &conf-GlobalSub;s.
__END__

__NAME__ example: Defining "SpecialSub missing"
In the event of a missing page, see if the "page name" could be understood as
"<literal><replaceable>product group</replaceable>/<replaceable>category</replaceable></literal>". If it could, use the provided information to construct
the search specification and invoke the search results page.
(More about &IC; search facilities can be read in <olink targetdoc='search'/>).
If it couldn't, return a &glos-false; value and proceed to display
"&conf-SpecialPage; <literal>missing</literal>".
</para><para>
Put the following in &ccf;:
<programlisting><![CDATA[
SpecialSub  missing  check_category

Sub check_category <<EOS
  sub {
    my ($name) = @_;
    return unless $name =~ m{^[A-Z]};
    $name =~ s,_, ,g;
    my ($prod_group, $category) = split m{/}, $name;

    $CGI->{co} = 1;
    $CGI->{fi} = 'products';
    $CGI->{st} = 'db';
    $CGI->{sf} = join "\0", 'prod_group', 'category';
    $CGI->{op} = join "\0", 'eq', 'eq';
    $CGI->{se} = join "\0", $prod_group, $category;
    $CGI->{sp} = 'results';
    $CGI->{mv_todo} = 'search';
    $Tag->update('process');

    return (1, 'results');
  }
EOS
]]></programlisting>
__END__

__NAME__ example: Defining SpecialSub init_session
If a client is coming from a "blacklisted" IP address, define
variable "blacklist" in its session.
</para><para>
At a later stage, "blacklisted" sessions could be prevented from
checking out and finalizing the order, as they are 
likely to be fraudulent.
</para><para>
<programlisting><![CDATA[
SpecialSub  init_session  check_blacklist

Sub check_blacklist <<EOS
  sub {
    my ($session) = @_;

    if ( grep { $CGI::remote_addr } @blacklisted_IPs ) {
      $session->{blacklist} = 1;
    }

    return;
  }
EOS
]]></programlisting>
__END__

__NAME__ example: Defining SpecialSub guess_cc_type
If the credit card number starts with "<literal>41</literal>", 
recognize it as type "<literal>LOCAL_TYPE</literal>". Otherwise,
return a false value and implicitly instruct &IC; to continue with
the built-in credit card type detection mechanism.
</para><para>
Put the following in &ccf;:
<programlisting><![CDATA[
SpecialSub  guess_cc_type  check_cc

Sub check_cc <<EOS
  sub {
    my $num = shift;
    return 'LOCAL_TYPE' if $num =~ /^41/;
    return;
  }
EOS
]]></programlisting>
__END__

__NAME__ author
&mheins;
__END__

