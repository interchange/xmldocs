__NAME__ purpose
specify subroutines to invoke when cart contents change
__END__


__NAME__ missing
__END__


__NAME__ see also
CartTriggerQuantity
__END__

__NAME__ synopsis
<arg choice='plain' rep='repeat'><replaceable>subroutine_name</replaceable></arg>
__END__


__NAME__ description
The directive specifies names of the &PERL; subroutines to invoke
when &glos-cart; contents change. The subroutines can 
be defined on both global and catalog level.
</para><para>
The subroutines execute whenever the contents of cart are changed via
the standard means available through &glos-CGI; variable space (i.e. when
changes are invoked via the &tag-process; system &glos-actionmap; &mdash;
through <mv>mv_order_item</mv> and <mv>mv_order_quantity</mv> field submissions,
or from a standard Interchange cart page).
</para><para>
The subroutines will be executed per-change, such that any page process
resulting in multiple alterations to the cart will potentially call these
functions multiple times.
</para><para>
The following arguments are passed to all specified subroutines:
<itemizedlist>
<listitem><para>
A reference to cart
</para></listitem>
<listitem><para>
A scalar representing the action that fired the trigger; its value will be
one of <literal>add</literal>, <literal>update</literal> or
<literal>delete</literal>
</para></listitem>
<listitem><para>
A hashref pointing to the new row (except for the <literal>delete</literal>
action, in which case this will be undefined)
</para></listitem>
<listitem><para>
A hashref representing the old row (except for the <literal>add</literal>
action); for the <literal>update</literal> action, this will be a
<emphasis role='bold'>copy</emphasis> of the row prior to the change.
The old row will no longer be a member of the cart
</para></listitem>
<listitem><para>
The symbolic name of the cart
</para></listitem>
</itemizedlist>
</para><para>
The return value from each subroutine call is pushed onto an array;
when the particular trigger firing is complete (i.e. all subroutines specified
in &conf-CartTrigger; have been called), the full array of results will be
returned. However, the initial version of this functionality does not use
these return values in any meaningful way.
__END__

__NAME__ notes
It must be noted that the &IC; cart subsystem is based on arrayrefs of hashrefs
(all &PERL; programming terms) &mdash; there is no object encapsulation for
limiting or monitoring program access to the contents of any cart.
Consequently, direct manipulation of the cart from within &PERL;
<emphasis role='bold'>will not</emphasis> cause these triggers to fire. The
triggers only fire when the cart contents are modified through the standard
Interchange &glos-CGI;-based variable processing. Therefore, it is assumed
(for the moment, at least) that any programmer sufficiently comfortable or
confident to manipulate cart contents directly can also be given the
responsibility of deciding whether or not it is appropriate to invoke cart
triggers along the way.
__END__

__NAME__ example: Quantity of subitems follows their master item
The quantity of sub items are automatically changed to the quantity of
the corresponding master item <emphasis role='bold'>regardless</emphasis> 
of the current quantity.

<programlisting><![CDATA[
Sub <<EOS
sub cascade_quantities {
	my ($cartref, $action, $newref, $oldref, $cartname) = @_;

	# act upon the main cart only
	return unless $cartname eq 'main';

	if ($action eq 'update' && $newref->{mv_si} == 0
		&& $newref->{quantity} != $oldref->{quantity}) {
		# update quantities of sub items
		for my $subref (grep {$_->{mv_mi} eq $newref->{mv_mi}} @$cartref) {
			$subref->{quantity} = $newref->{quantity};
		}
	}
}
EOS

CartTrigger cascade_quantities
CartTriggerQuantity Yes
]]></programlisting>
__END__

