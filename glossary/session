<para>
The session contains:
</para>
<itemizedlist>
<listitem>&glos-cart; contents</listitem>
<listitem>&glos-CGI; variables</listitem>
<listitem>&glos-value; variables</listitem>
<listitem><tag>error</tag>s</listitem>
<listitem><tag>warnings</tag></listitem>
<listitem>&glos-discount; settings</listitem>
<listitem>&glos-levy; charges</listitem>
<listitem>input filters in the <literal>Filter</literal> key, see <tag>input-filter</tag>
</listitem>
<listitem><tag>captcha</tag> code in <literal>captcha</literal> key
</listitem>
</itemizedlist>
<para>
The length of the session identifier is determined by the <code>session_id_length</code> &conf-Limit; setting.
</para>
<!--
=item Session parameters

Things like where the user originally found your catalog ([data session source]
and [data session referer]), domain they are from ([data session host]),
the time of their last access ([data session time]), and many other parameters.




=head2 A typical user session for an e-commerce system

The user hears about your site via a search engine, link from another
page, or click-thru from a banner ad. They access the link, which is a
URL pointing to the Interchange link program (called VLINK or TLINK, more
on that below).  The Interchange server is already running on your system,
and your site has been designed and tested.

The link program, which is a regular CGI program, calls the Interchange
server.  The Interchange server sees the path information which is appended
to the URL calling it, and brings up the corresponding page.  The page
contains a link to order items from your catalog.

The user clicks on the link and Interchange looks in the a products database,
finds the item, and places it in the user's shopping cart. (Each user has
a separate shopping cart, which is attached to their session.)

Once the user decides to purchase, they check out by filling out a form
with their name, address, payment information, etc. In the process they
may make choices about how the product should be shipped, how they will
pay, and provide any other information you may ask for. They then place
(or "submit") the order.

Their payment may be taken at that point via real-time credit card
approval and a soft-goods product downloaded - or their order
information may be simply sent to you, the store owner, via encrypted
email. The order is saved to a database table (and a file as backup),
or in the case of fully-automated systems sent directly to an order
entry program or database link.

All of these operations are fully configurable by you.  The base Interchange
distribution includes a sample store - some users have simply customized
the text and images inside, changed the database entries, and opened
their store. You will probably want to fully customize for a distinctive
catalog look and feel.

=head2 How Interchange Manages Sessions

Normally, each request for a World Wide Web page which comes in to a
server stands on its own. While the server will probably know which
machine a request comes from, it may not know if the next request
comes from the same browser or even from the same user on that
machine.

Interchange keeps track of who is ordering what by including in the URL
a session id, which is a random piece of text which is different for
each customer browsing the catalog.

This session ID is either tracked with cookies, or it can be passed
along through special URLs within pages. Pages
served by Interchange can generate a special URL
for every link. Here is an example of such a URL:

    http://machine.company.com/cgi-bin/standard/browse?id=WehUkATn&mv_pc=1

An explanation of each part:

=over 4

=item machine.company.com

Internet address of the server hosting the Interchange site.

=item cgi-bin

Informs server that the requested page will be generated by a
program.

=item standard

Name of the program to run

=item browse

Page of the catalog to display

=item id=WehUkATn

The session ID

=item mv_pc=1

A unique integer (or source code, if it contains a letter) which prevents
browsers from caching the URL.

=head2 Page Delivery

Interchange pages are written in regular HTML with extensions.
Interchange extensions look like:

    <a href="[area specials]">See our specials!</a>

Pages are delivered through the following steps:

=over 4

=item *

The HTTP server (like Apache) receives a request for a Interchange page.

=item *

The server is already running as a daemon, and the request calls a small
C program (source is vlink.c or tlink.c) that is I<named according to
which catalog is being called.> This program communicates with the
Interchange program via a UNIX- or INET-domain socket.

NOTE: Interchange can also link via other means such as C<mod_interchange>.

=item *

Interchange reads the source page from the Interchange pages directory, and
interprets the Interchange tags in the file. If the page doesn't exist,
and corresponds to a part number in the database, it is built "on the
fly" using a template page. In the process, it may read or modify any
number of database tables. If the user's browser doesn't accept cookies,
then any links generated on the page will contain the I<session ID>, which
is needed to ensure the user's session is retained.

=item *

The page, which is now entirely in regular HTML, is delivered to
the HTTP server, which returns it to the browser.


EXPIRING 

Some thought should be given to where the databases, error logs, and session files should be located, especially on an ISP that might have multiple users sharing an Interchange server. In particular, put all of the session files and logs in a directory that is not writable by the user. This eliminates the possibility that the catalog may crash if the directory or file is corrupted.


Interchange will wait until the current transaction is finished before expiring, so this can be done at any time without disabling web access. Any search paging files for the affected session (kept in C<ScratchDir>) will be removed as well.
In addition, the C<[data ...]> tag can access a number of elements in the Interchange session database:

!block example; listitem=2
    accesses      Accesses within the last 30 seconds
    arg           The argument passed in a [page ...] or [area ...] tag
    browser       The user browser string
    host          Interchange's idea of the host (modified by DomainTail)
    last_error    The last error from the error logging
    last_url      The current Interchange path_info
    logged_in     Whether the user is logged in via UserDB
    pageCount     Number of unique URLs generated
    prev_url      The previous path_info
    referer       HTTP_REFERER string
    ship_message  The last error messages from shipping
    source        Source of original entry to Interchange
    time          Time (seconds since Jan 1, 1970) of last access
    user          The REMOTE_USER string
    username      User name logged in as (UserDB)
!endblock



</para><para>
When <mv>mv_tmp_session</mv> is defined, [Not]RobotUA is ignored.
Also mention mv_tmp_session, _no_session, _no_session_id.
Changing IPs situation

-->
