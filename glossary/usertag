
<emphasis>Tag</emphasis> is a basic functional unit in &glos-ITL; &mdash; 
Interchange Tag Language.
It is to &IC; what HTML tags are to a &glos-HTML; page, or binary executables
to an Unix shell.
</para><para>
As tags and their usage are explained under the &glos-ITL; glossary entry, 
we are going to explain usertag inclusion in the Interchange server and
usertag programming here.

<section>
	<title>Usertag inclusion</title>
	<para>
	</para>
</section>







<section>
	<title>Usertag programming</title>



<section>
	<title>Place of definition</title>
	<para>
	Tags have traditionally been defined in 
	<filename>lib/Vend/Interpolate.pm</filename> file in the &IC; source tree.
	While some of the crucial tags are still defined there (search for
	<literal>^sub tag_</literal> in the file) to solve the chicken-or-egg
	problem, new tags should be created as standalone files within the
	<filename class='directory'>code/</filename> directory in the Interchange
	source. This makes them more manageable and allows you to easily
	"deactivate" unused tags and decrease IC;'s memory footprint (as
	explained above).
	</para>
</section>

<section>
	<title>Tag types</title>
	<para>
	Even though all &IC; tags are generally called <emphasis>tags</emphasis> or
	<emphasis>usertags</emphasis>, there are actually three types of tags:
	system tags, user tags and UI tags. There's no functional difference between
	them, but we've decided to introduce a rough distinction.
	</para>
	<para>
	<itemizedlist>
		<listitem><para>
		System tags (or <emphasis>core</emphasis> tags) are defined in
		<filename>lib/Vend/Interpolate.pm</filename> and 
		<filename class='directory'>code/SystemTag/</filename> in 
		&IC; source. They are used by core Interchange modules
		(<filename>lib/Vend/*.pm</filename> files) and are required for a 
		functional installation.
		Some files have the extension <literal>.coretag</literal>, and some
		have the usual <literal>.tag</literal>, but there's no difference.
		(<literal>.tag</literal> is preferred for your custom tags).
		</para></listitem>
		<listitem><para>
		User tags are defined in
		<filename class='directory'>code/UserTag/</filename> directory and
		form a collection of commonly used Interchange tags. This is the most
		common type and directly intended for custom catalog programming.
		</para></listitem>
		<listitem><para>
		&glos-UI; (User Interface) tags are defined in
		<filename class='directory'>code/UI_Tag/</filename> directory and
		form a collection of extra tags used by our Admin UI interface.
		</para></listitem>
	</itemizedlist>
	</para>
	<para>
	A catalog that is not running the Admin UI should, theoretically, be able
	to do without the whole <filename class='directory'>code/UI_Tag/</filename>
	directory. However, as very useful tags are found within all three types,
	the &conf-AccumulateCode; approach is preferred over this crude
	directory-based selection.
	</para>
</section>


<section>
	<title>Tag restrictions and global code</title>
	<para>
	Global usertags (defined at the &IC; server level) run directly under
	&IC; server permissions, without restrictions.
	</para><para>
	Catalog usertags (defined at the &glos-catalog; level), however, run
	under &glos-safe; restrictions to maximize security.
	</para><para>
	You should run all your custom tags at catalog-level and eventually
	let some of the restrictions loose using &conf-SafeUntrap; configuration
	directive. Run global usertags only when there is no other option, and 
	make sure your code is as resilient to arbitrary user input as possible.
	</para>
</section>

<section>
	<title>Location for custom usertags</title>
	<para>
	Usertags are defined using the &conf-UserTag; config directive so,
	obviously, they have to be defined in &gcf; or &ccf;, or some separate
	files read by those basic &glos-configuration; files.
	</para>
	<para>
	While you could add your own tags to the default &IC; directories
	(within the <filename class='directory'>code/</filename> directory, as
	explained) or even define them in &gcf; or &ccf; directly, it's generally
	best if you create a
	<filename class='directory'>usertag/</filename> directory (at a catalog 
	or global level), put your custom tags there, and include them in the
	running configuration with the <code>include usertag/*.tag</code>
	configuration directive.
	</para>
</section>

<section>
	<title>Basic usertag file</title>
	<para>
	Here's a classic &glos-hello-world; usertag example,
	containing all the relevant structural elements:
<programlisting><![CDATA[
# Copyright YEAR COPYRIGHT-HOLDER-NAME EMAIL-OR-WEB-ADDRESS
# Licensed under the GNU GPL v2. See file LICENSE for details.
# $Id: usertag,v 1.3 2006-09-27 09:11:01 docelic Exp $

UserTag hello-world Order     name
UserTag hello-world addAttr
UserTag hello-world Version   $Revision: 1.3 $
UserTag hello-world Routine   <<EOR
sub {
  my ($name, $opt) = @_;
  my $ret;

  $name ||= "world";
  $name = ucfirst $name;

  if ( $_ = $opt->{surname} ) {
    $_ = ucfirst;
    $name .= " $_";
  }

  $ret = "Hello, $name!";

  return $ret;
}
EOR
]]></programlisting>
	</para><para>
	After you install the usertag (as explained above), you can test it
	by using this sample HTML code:
<programlisting><![CDATA[
<pre>
  The default name: [hello-world]

  Name "John": [hello-world john]

  Name "John", surname "Doe": [hello-world name=john surname=doe]
</pre>
]]></programlisting>
	</para><para>
	As you can see, each usertag is defined through a series of
	&conf-UserTag; lines. All possible &glos-UserTag; options are
	explained in the following section.
	</para>
</section>

<section>
	<title>Usertag options</title>
	<para>
	Recognized usertag options are defined as a &PERL; hash named
	<literal>%tagCanon</literal> in file <filename>lib/Vend/Config.pm</filename>:
<itemizedlist>
<listitem><para>
 Group
</para></listitem>
<listitem><para>
 ActionMap
</para></listitem>
<listitem><para>
 ArrayCode
</para></listitem>
<listitem><para>
 HashCode
</para></listitem>
<listitem><para>
 CoreTag
</para></listitem>
<listitem><para>
 SearchOp
</para></listitem>
<listitem><para>
 Filter
</para></listitem>
<listitem><para>
 FormAction
</para></listitem>
<listitem><para>
 OrderCheck
</para></listitem>
<listitem><para>
 UserTag
</para></listitem>
<listitem><para>
 SystemTag
</para></listitem>
<listitem><para>
 Widget
</para></listitem>
<listitem><para>
 Alias &mdash; another name, an alias, for the tag.
<programlisting>
UserTag <replaceable>ALIASED-NAME</replaceable> Alias <replaceable>NAME</replaceable>

UserTag time Version $Revision: 1.3 $
UserTag date Alias   time
</programlisting>
</para></listitem>
<listitem><para>
 addAttr &mdash; pass a hash reference with all user-supplied tag attributes
 as last argument to the tag handling subroutine.
<programlisting>
UserTag <replaceable>NAME</replaceable> addAttr <replaceable>[VALUE]</replaceable>

UserTag benchmark addAttr     <emphasis>(implies Yes)</emphasis>

UserTag benchmark addAttr 1

UserTag benchmark addAttr 0
</programlisting>
</para></listitem>
<listitem><para>
 attrAlias &mdash; another name, an alias, for a tag's attribute.
<programlisting>
UserTag <replaceable>NAME</replaceable> attrAlias <replaceable>ALIASED-ATTR-NAME</replaceable> <replaceable>REAL-ATTR-NAME</replaceable>

UserTag meta-info Order     table column key
UserTag meta-info attrAlias col column
</programlisting>
</para></listitem>
<listitem><para>
 attrDefault
</para></listitem>
<listitem><para>
 canNest
</para></listitem>
<listitem><para>
 Description &mdash; embedded, one-line tag description.
<programlisting>
UserTag <replaceable>NAME</replaceable> Description <replaceable>TEXT</replaceable>

UserTag uninstall_feature Description Uninstall feature installed with 'Feature' config directive.

UserTag uninstall_feature Description &lt;&lt;EOD
Uninstall feature installed with
'Feature' config directive.
EOD
</programlisting>
</para></listitem>
<listitem><para>
 Override
</para></listitem>
<listitem><para>
 Visibility
</para></listitem>
<listitem><para>
 Help
</para></listitem>
<listitem><para>
 Documentation &mdash; embedded tag documentation. This can be any free-form
 text, but sometimes it's handy to write the documentation in &PERL; POD 
 syntax, as it allows the use of convenient <command>pod2text</command>
 and related commands to read the documentation.
<programlisting>
UserTag <replaceable>NAME</replaceable> Documentation <replaceable>TEXT</replaceable>

UserTag tabbed-display Documentation &lt;&lt;EOD
tabbed-display -- DHTML tabbed display
  ......
EOD
</programlisting>
</para></listitem>
<listitem><para>
 ExtraMeta
</para></listitem>
<listitem><para>
 Gobble
</para></listitem>
<listitem><para>
 hasEndTag &mdash; the tag has an end tag. In other words, 
 <emphasis role='bold'>the tag is a container</emphasis>.
<programlisting>
UserTag <replaceable>NAME</replaceable> hasEndTag <replaceable>[VALUE]</replaceable>

UserTag widget hasEndTag     <emphasis>(implies Yes)</emphasis>

UserTag widget hasEndTag 1

UserTag widget hasEndTag 0
</programlisting>
</para></listitem>
<listitem><para>
 Implicit
</para></listitem>
<listitem><para>
 Interpolate &mdash; &glos-interpolate; tag data. Due to a poor naming choice,
 <emphasis role='bold'>this option behaves differently for non-container
 and container tags</emphasis>.
 </para><para>
 For non-container tags, it specifies whether <emphasis role='bold'>tag 
 output</emphasis> should be &glos-reparse;d for more &IC; tags.
 </para><para>
 For container tags, it specifies whether <emphasis role='bold'>tag 
 body</emphasis> should be &glos-interpolate;d before being passed
 to the tag. Another option, <literal>NoReparse</literal> then controls
 whether final <emphasis role='bold'>tag output</emphasis> should
 be &glos-reparse;d for more &IC; tags.
 </para><para>
 Interpolation is turned off by default.
<programlisting>
UserTag <replaceable>NAME</replaceable> Interpolate <replaceable>[VALUE]</replaceable>

UserTag table-organize Interpolate     <emphasis>(implies Yes)</emphasis>

UserTag table-organize Interpolate 1

UserTag table-organize Interpolate 0
</programlisting>
</para></listitem>
<listitem><para>
 InvalidateCache
</para></listitem>
<listitem><para>
 isEndAnchor
</para></listitem>
<listitem><para>
 noRearrange
</para></listitem>
<listitem><para>
 Order
</para></listitem>
<listitem><para>
 PosNumber &mdash; number of positional tag parameters. This option is not required as the number is automatically calculated from the <literal>Order</literal>
 option.
<programlisting>
UserTag <replaceable>NAME</replaceable> PosNumber <replaceable>COUNT</replaceable>

UserTag test Order     opt1 opt2 opt3
UserTag test PosNumber 3
</programlisting>
</para></listitem>
<listitem><para>
 PosRoutine
</para></listitem>
<listitem><para>
 MapRoutine
</para></listitem>
<listitem><para>
 NoReparse &mdash; do not reparse <emphasis role='bold'>output from
 container tags</emphasis> for more &IC; tags. This option has no effect
 on non-container tags.
 </para><para>
 Reparsing is turned on by default (<literal>NoReparse 0</literal>).
<programlisting>
UserTag <replaceable>NAME</replaceable> NoReparse <replaceable>[VALUE]</replaceable>

UserTag either NoReparse     <emphasis>(implies Yes)</emphasis>

UserTag either NoReparse 1

UserTag either NoReparse 0
</programlisting>
</para></listitem>
<listitem><para>
 JavaScriptCheck
</para></listitem>
<listitem><para>
 Required
</para></listitem>
<listitem><para>
 Routine
</para></listitem>
<listitem><para>
 Version
</para></listitem>
</itemizedlist>
	</para>
</section>

</section>

