In general, databases contain information, usually in tabular format,
where columns define the names and types of contained data, and rows
represent <emphasis>entries</emphasis> &mdash; database
<emphasis>records</emphasis>.
</para><para>
&IC; is primarily using databases to just retrieve values from specific
tables, and does not use any higher-level functions of RDBM databases
(such as views, triggers, or stored procedures in &PGSQL;).
Such things can, however, be implemented in the database independently 
of &IC;, as Interchange will properly pass any warning or error messages back
and forth.
</para><para>
We should say right away that &IC; is completely database-independent.
The choice of actual database types that can work with Interchange is large,
and &IC; can use some database-like methods automatically when you're not
explicitly interested in paying attention to databases working behind
the scenes.
</para><para>
Common features are transparently available
everywhere (with absolutely no code hacks or special cases required),
regardless of the underlying database type used. In addition, almost no
field names are hard-coded, allowing for unlimited flexibility.
</para><para>
<emphasis role='bold'>
Keep in mind that the terms <literal>database</literal> and 
<literal>database table</literal> actually mean the same thing in &IC; 
parlance - a <literal>database table</literal>.
</emphasis>
</para><para>
&IC; works with &GDBM;, DB_File, SQL, LDAP and in-memory types of databases. 
Regardless of type or other characteristics, each database must be registered
on a &glos-catalog; level before it's ready to be used, and this is achieved
using the &conf-Database; configuration directive. It's useful to remember
at this point that multiple catalogs can share the same database.
</para><para>
Three parameters need to be present in a basic &conf-Database; definition:
an arbitrary database name, text source file with initial content, and the
type of the database.
</para>

<section>
	<title>Text Source Files</title>
<para>
Text source files are not databases themselves, of course
(for performance and other reasons); they are only used to provide
<emphasis>initial data</emphasis> for the corresponding database tables.
</para><para>
By default, all database source files are kept in the 
<filename class='directory'>products/</filename> subdirectory of your
&glos-CATROOT;. The &conf-ProductDir; directive controls the exact location.
</para><para>
The ASCII files can contain carriage return
(<literal>^M</literal>) characters even in data fields, but must have a
newline character (<literal>^N</literal>) at the end of line to properly
separate records.
<emphasis role='bold'>
Mac users uploading files must use ascii mode, not binary mode</emphasis>.
</para>
<para>
Interchange's default ASCII delimiter is TAB. <emphasis role='bold'>Keep in
mind that the items must be separated by a single delimiter (that is, by a
single TAB only)</emphasis>. Due to the nature of TABs, TAB-delimited files
look messy and unaligned when viewed in a text editor. Do not try to fix these;
better use the <command>te</command> utility that comes as part of the 
&IC; distribution to edit such files more conveniently.
</para>

Interchange can manage an unlimited number of arbitrary database tables and
database table types. Several flexible delimiter schemes are available 
"out of the box":

<itemizedlist>
	<listitem>
	<para>TAB-delimited file (Type 1, the default):
Fields are separated by TAB characters. No whitespace is allowable
at the beginning of the line.
</para>
<screen>
code	description	price image
SH543	Men's fine cotton shirt	14.95	shirts.jpg
</screen>
<para>
(&TAB_DELIMITED_NOTICE;)
</para><para>
Using the default TAB delimiter is recommended if you plan on
searching the ASCII source file of the database.
	</para></listitem>

	<listitem>
	<para>LINE (Type 2):
Fields are specified each on its own line, separated by the newline
(<literal>\n</literal>) character. One blank line separates a record
from another record. <!-- CONTINUE NOTES NOTE -->

<screen>
code
description
price
image

SH543
Men's fine cotton shirt
14.95
shirts.jpg
</screen>
	</para></listitem>

	<listitem>
	<para>%% (Type 3):
Fields are separated by the literal combination of
"<literal>\n%%\n</literal>", while the records are separated
by "<literal>\n%%%\n</literal>". Users fond of the Unix "fortune"
program may find this format familiar.

<screen>
code
%%
description
%%
price
%%
image
%%%
SH543
%%
Men's fine cotton shirt
%%
14.95
%%
shirts.jpg
</screen>
	</para></listitem>


	<listitem>
	<para>CSV-delimited file (Type 4):
Fields are enclosed in quotes and separated by commas. Again, no whitespace
should be at the beginning of the line.
</para>
<screen>
"code","description","price","image"
"SH543","Men's fine cotton shirt","14.95","shirts.jpg"
</screen>
<para>
CSV-delimiter schemes might cause problems with ASCII text searching routines.
	</para></listitem>


	<listitem>
	<para>PIPE-delimited file (Type 5):
Fields are separated by the pipe ("<literal>|</literal>") characters which 
resemble vertical lines. No whitespace is allowable at the beginning of the
line.
</para>
<screen>
code|description|price|image
SH543|Men's fine cotton shirt|14.95|shirts.jpg
</screen>
<para>
PIPE-delimited files perform fairly well with ASCII text searching routines.
	</para></listitem>


	<listitem>
	<para>TAB-delimited file (Type 6):
	</para></listitem>


	<listitem>
	<para>&lt;reserved&gt; (Type 7):
	</para></listitem>


	<listitem>
	<para>&glos-SQL; (Type 8):
	</para></listitem>


	<listitem>
	<para>LDAP (Type 9):
	</para></listitem>

	</itemizedlist>

<note>
	<para>
Field names are usually case-sensitive (in fact, that depends on the
underlying database type). Always be consistent when
naming or referencing fields and you'll avoid the trouble. All lower or
all upper case names are recommended.
</para>
</note>

<para>
If a database is specified to be one of the first six types, then the database
will automatically be converted to a more efficient internal structure.
Those include DB_FILE, GDBM, or MEMORY. The order of preference and the selection is:

<!--
LI1: GDBM

.This uses the Perl C<GDBM_File> module to build a GDBM database. The following command will indicate if GDBM is in Perl:

!block example; listitem=2
    perl -e 'require GDBM_File and print "I have GDBM.\n"'
!endblock

.Installing GDBM_File requires rebuilding Perl after obtaining the GNU GDBM package, and is beyond the scope of this document. LINUX will typically have this by default; most other operating systems will need to specifically build in this capability.

LI1: DB_File (Berkeley DB)

.This uses the C<DB_File> module to build a Berkeley DB (hash) database. The following command will indicate if DB_File is in Perl:

!block example; listitem=2
    perl -e 'require DB_File and print "I have Berkeley DB.\n"'
!endblock

.Installing C<DB_File> requires rebuilding Perl after obtaining the Berkeley DB package, and is beyond the scope of this document. BSDI, FreeBSD, and LINUX will typically have it by default; most other operating systems will need to specifically build this in.

.If using C<DB_File>, even though C<GDBM_File> is in Perl, set the environment variable MINIVEND_DBFILE to a true (non-zero, non-blank) value:

!block example; listitem=2
    # csh or tcsh
    setenv MINIVEND_DBFILE 1

    # sh, bash, or ksh
    MINIVEND_DBFILE=1 ; export MINIVEND_DBFILE
!endblock

.Then, re-start the server.

.Or, to set a particular table to use Berkeley DB, the DB_FILE class in C<catalog.cfg> can be specified:

!block example; listitem=2
    Database arbitrary  DB_FILE  1
!endblock

LI1: In-memory

.This uses Perl hashes to store the data directly in memory. Every time the Interchange server is restarted, it will re-import all in-memory databases for every catalog.

.If this is used, despite the presence of C<GDBM_File> or C<DB_File>, set the environment variable MINIVEND_NODBM as above or specify the memory type in the Database directive:

!block example; listitem=2
    Database arbitrary  MEMORY  1
!endblock

Note: The use of memory databases is not recommended.
-->

</para>

</section>

<section>
	<title>SQL Databases</title>
<para>
As hinted above, you do not need to use an external &glos-SQL; database.
If you only
have a small data set, you could use Interchange's internal databases.
This is a tremendous gain for small and quick setups, or ad-hoc &IC; evaluation.
However, some functions (order management, for example) will be slower
and not as robust without an SQL database. SQL is strongly recommended for
at least the <database>state</database>,
<database>country</database>,
<database>orderline</database>,
<database>transactions</database>
and <database>userdb</database> tables. Any other tables that will
have programmed updates, such as <database>inventory</database>, are
also best placed in SQL.
</para>

<note>
<title>Database performance</title>
<para>
Do not, however, try to optimize too soon and for no measurable difference.
Do not fall in the jaws of <ulink url="http://c2.com/cgi/wiki?PrematureOptimization">premature optimization</ulink>, <ulink url="http://www.flounder.com/optimization.htm">your worst enemy</ulink>.
</para>
</note>

<para>
Generally, you <emphasis>should</emphasis>
make an additional 
effort of configuring and using SQL databases to achieve &IC;'s full potential.
Using SQL also makes your data sets easily available for integration with
other applications.
</para><para>
In any case, database import and conversion routines are already
available in &IC; and you can use them at any point.
</para><para>
Speaking of the source files' behavior, if a file named
<filename><replaceable>table</replaceable>.sql</filename> is present
in the same directory as
<filename><replaceable>table</replaceable>.txt</filename>, then database
table will never be imported from the ASCII text source file.
If there is no <filename><replaceable>table</replaceable>.sql</filename>,
the DBI/SQL import will happen once, at
&IC; startup or catalog reconfiguration time (and the 
<filename><replaceable>table</replaceable>.sql</filename> file will be
created);
Interchange will connect to the SQL database using the specified DSN
(DSN is a standard DBI parameter meaning "Database Source Name").
The table will be dropped (if it already exists in the database) using a
line similar to
<literal>DROP TABLE <replaceable>table</replaceable></literal>.
This will occur without warning, but &conf-NoImport; can be used to 
prevent it or otherwise change the default behavior.
The table will then be created again and populated with text source
file data.
</para><para>
If there are any
<literal>COLUMN_DEF</literal> specifications present in &gcf;, &ccf; or
<filename>products/<replaceable>table</replaceable>.sql</filename>,
they will be used to create SQL table specification
(which is recommended for clean and correct database
layout). If there aren't any, however, then the key (first field in the text
file, by default) will be created with the type <literal>char(16)</literal>,
and all other fields will be created as <literal>char(128)</literal>. This is 
very unfortunate, but the best &IC; can do without your help.
Table creation statements will be written to the <filename>error.log</filename>
along with, of course, any errors. From our experience, the most common
mistake at this point is choosing column names that sound perfectly reasonable, 
but also happen to be reserved keywords in &MYSQL;. (The error messages
appear to be misleading here, so you better take a look at the
<ulink url="http://dev.mysql.com/doc/refman/5.0/en/reserved-words.html">list
of reserved MySQL keywords</ulink> before losing patience with the problem).
</para><para>
Once the &glos-database; (database table actually, remember?)
is created, the text source file will be imported into it.
For this step to succeed, data typing must be user-configured. In other words,
if say, word "<literal>none</literal>" is placed in a field while the field
in question
is defined to be of numeric type, database import will not succeed;
consequently, the problematic catalog won't configure successfully 
(it will be skipped) and it won't be available when &IC; starts up.
</para><para>
For a complete discussion, please see the &conf-Database; configuration
directive.
</para>
</section>

<section>
	<title>File-based Databases</title>
<para>
By file-based databases we primarily assume &GDBM; and DB_File. We also
call those database types "internal", since in the absence of say, an
SQL definition,
all inferior formats (such as text source files) are automatically converted to
some kind of a file-based database.
</para><para>
Those database types usually work in a way that, on every client access, the
appropriate database text source file is checked for being newer than the
actual DB file itself.
When it happens that it is, the database table is re-imported
from the text source file <emphasis>on the fly</emphasis>, and the routine
then proceeds as usual.
</para>
<note>
<title>Database updates</title>
<para>
It is important to note that, when using &IC; internal database methods, 
all changes in the text source files cause the databases to be re-created.
This can have unwanted effects if the database was modified from within
&IC; and the contents have not been written back to the text source files.
Another common problem are larger data sets that take noticeable time to get
imported to (or exported from) the internal database.
</para><para>
The exact behavior can be controlled via the &conf-NoImport; config directive,
but by default, changes in text files will trigger a complete
rewrite of DBM or DB_File databases.
</para>
</note>
<para>
To check if you have &GDBM; and GDBM &PERL; support available, run 
<command>perl -le'require GDBM_File and print "I have GDBM."'</command>.
To check if you have &BDBM; and DBM &PERL; support available, run 
<command>perl -le'require DB_File and print "I have Berkeley DB."'</command>.
Sometimes you want to use &BDBM; even if &GDBM; is installed and would 
naturally take precedence; in such cases, set the 
<envar>MINIVEND_DBFILE</envar> environment variable to a true value
(<command>setenv MINIVEND_DBFILE 1</command> in <application>csh</application>,
<command>MINIVEND_DBFILE=1 ; export MINIVEND_DBFILE</command> in 
<application>sh</application>,
<application>b(a)sh</application> or 
<application>ksh</application>).
It is also possible to use &BDBM; for just specific databases.
</para>
<para>
For a complete discussion, please see the &conf-Database; configuration
directive.
</para>
</section>

<section>
	<title>Memory Databases</title>
<para>
Memory &IC; databases 
use &PERL; hashes to store the data directly in memory. Every time
the &IC; server is restarted, it will re-import all in-memory
databases for every catalog.
</para>
<para>
Memory databases are used by default only if no database type is
explicitly specified, and there is no DB_File or &GDBM; found on
the system. Otherwise they can be used for small but high-traffic
tables. Keep in mind, however, that since their contents are not saved back
to the text files, you'll want to either take care of the data export yourself,
or keep the tables stuffed with read-only data.
</para>
<para>
if you want to force memory databases despite of GDBM_File or DB_File
being present, set the <envar>MINIVEND_NODBM</envar> environment variable
to a true value (look previous chapter for hints on setting it).
It is also possible to use memory type for just specific databases.
</para>
<para>
Memory databases import will be performed once at 
every &IC; startup or catalog reconfiguration time.
</para><para>
For a complete discussion, please see the &conf-Database; configuration
directive.
</para>
</section>


<section>
	<title>Interchange Database Design</title>
<para>
We are trying not to impose any database structure that would require
our own tools to maintain the data. We always want to keep
it such that &IC; data can be maintained via a spreadsheet processor or
foreign database tools.
</para>
</section>

<section>
	<title>Interchange Database Conventions</title>
<para>
This section describes naming and file usage conventions used with
&IC;. This is very important for both understanding &IC; and developing
your own custom solutions which build upon officially recommended practices.
</para><para>
Term definitions:
</para>
<itemizedlist>
<listitem>
	<para><emphasis>key</emphasis> or <emphasis>code</emphasis></para>
	<para>
	The words reference the database key. In &IC;, the key is usually the
	product <emphasis>code</emphasis> or &glos-SKU;, which is the product
	part number. Otherwise, key values may be used to generate relationships
	to other database tables.
	</para><para>
	It is recommended that the key be the first column of the database
	text source file, since Interchange's import, export, and search
	facilities rely on this practice.
	</para>
</listitem>
<listitem>
	<para><emphasis>field</emphasis> or <emphasis>column</emphasis></para>
	<para>
	The vertical row of a database. One of the columns is always the key
	and it is usually the first one, as explained above.
	</para>
</listitem>
<listitem>
	<para><emphasis>table</emphasis> or <emphasis>database</emphasis></para>
	<para>
	A table in the database. Because &IC; has evolved from a
	single-table database to an access method for an unlimited number of
	tables (and databases, for that matter), a table will occasionally be
	referred to as a database. The only time the term database refers to
	something different is when describing the concept as it relates to
	SQL, where a database contains a series of tables. While &IC;
	cannot create SQL databases, it can drop and create tables within
	databases if given the proper permissions.
	</para>
</listitem>
</itemizedlist>


<para>
	&IC; uses one mandatory database, which is referred to as the
	<database>products</database> database. In the supplied demo catalog
	(and in the most of real-world solutions as well), the primary
	database is directly called <literal>products</literal> 
	and the ASCII source is kept in the <filename>products/products.txt</filename>
	file.
	This is also the default file for searching contents with
	the search engine, such as Glimpse, HTDig or Swish.
</para>

<note>
<para>
	Interchange also has two optional databases that
	are specified <emphasis role='bold'>in special, fixed formats</emphasis>:
	</para>
	<itemizedlist>
<listitem>
<para>
	<database>shipping.asc</database> database contains shipping options that are
	accessed if the	&conf-CustomShipping; directive is in use.
	This is a fixed-format database, and must be created as specified.
	For more information, see &glos-shipping; glossary entry and the 
	&tag-shipping; tag.
</para>
</listitem>
<listitem><para>
	<database>salestax.asc</database> database contains 
	sales tax information if the &tag-salestax; tag is to
	be used. A default is supplied.
	<emphasis role='bold'>Caution, these things change and need 
	periodic updating!</emphasis> See &glos-tax; glossary entry for more
	information.
</para>
</listitem>
</itemizedlist>
<para>
	The two above tables cannot be stored in any user-specified format.
</para>
</note>

</section>

<para>



<!-- 

For &GDBM; &glos-database;s, the import would ordinarily happen when the
gdbm/db file is deleted, a change in appropriate text source file is detected,
&IC; is (re)started, or the catalog is reconfigured. &glos-SQL; databases
are imported only once, at first configuration.


<emphasis>External</emphasis> database types are DBI (&MYSQL;, &PGSQL;,
&ORACLE; etc.) and LDAP (&OPENLDAP; etc.). In contrast,
<emphasis>internal</emphasis> database types are DBM variants
(&GDBM;, &BDBM;, SDBM) and in-memory.


table= and sql parser
-->
