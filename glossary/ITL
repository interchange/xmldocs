&IC; functions are accessed via the Interchange Tag Language (&glos-ITL;).
The pages in a catalog may be mostly &glos-HTML;, but they will use ITL tags
to provide dynamic content and access Interchange functions in general.
ITL is a superset of MML, or &glos-Minivend; Markup Language.
</para><para>
ITL tags perform all kinds of operations.
There's more than 200 standard predefined tags, and the
&conf-UserTag; facility allows you to create your own custom tags, 
indistinguishable from the ones "built-in". To get started
with custom tags, see &glos-usertag; glossary entry.
</para>

<section>
<title>Basics</title>

<para>
&glos-ITL; tags are similar to HTML, in that they accept
attributes and that there are both
<emphasis>standalone</emphasis> (non-container) and
<emphasis>container</emphasis> tags.
</para>
<para>
A standalone tag has no ending element, such as &tag-value;:

<programlisting>
[value name]
</programlisting>

The above example will insert user's name.
</para><para>
A container tag has both beginning and ending elements, such as tag &tag-if;:

<programlisting>
[if value name]
  You have provided us with your name. It is [value name].
[/if]
</programlisting>

In the above example, you see that container tags are in general
useful only when content is provided in their <emphasis>body</emphasis>
(the place between the opening and corresponding ending tag).
</para><para>
There must be no whitespace
between the left bracket ([) and the tag name; <code>[forum]</code> is
valid, <code>[ forum]</code> is not!
</para>
</section>


<section>
<title>Standard Syntax</title>

<para>
We've covered the most basic syntax above. If you need to pass
attributes to the tag, you do that in the opening section.
If the tag is a container, then body text can additionally be specified
between the opening and closing marker:

<programlisting>
[<replaceable>tagname</replaceable> <replaceable>parameters_or_attributes</replaceable>]
  <replaceable>Body Text</replaceable>
[/<replaceable>tagname</replaceable>]
</programlisting>

Note that some &IC; <emphasis>macros</emphasis> (drop-in text replacements)
may look like tags or end tags. For example, <code>[/page]</code> used to
be a macro that expanded to <literal>&lt;/a&gt;</literal>, but  &tag-page;
itself was not a container tag and <literal>[/page]</literal> wasn't its
closing element. Likewise, some tags perform special subtags processing
on their own, and the subtags are not considered real tags &mdash;
they only exist in the context of the surrounding tag and usually support
only limited options. One such example is tag &tag-row; with its subtag
&tag-column;.

</para>

<para>
It is important to mention that
<emphasis>if a tag <emphasis role='bold'>or</emphasis> argument name
includes an underscore or dash (such as in &tag-item-list;), then you can
always choose between the dash <emphasis role='bold'>and</emphasis>
underscore</emphasis>! The two forms are interchangeable, except that you
must be consistent with tag markers; an ending tag must match the opening tag.
Both <code>[item-list]...[/item-list]</code> or
<code>[item_list]...[/item_list]</code> are fine, but
<code>[item-list]...[/item_list]</code> is
<emphasis role='bold'>not</emphasis>.
</para>
<para>
This is a very convenient feature. It is a common standard to use dashes
(<literal>-</literal>) in &glos-ITL;, and underscores (<literal>_</literal>)
in &PERL; code (because in Perl, dashes would be interpreted as minus operators,
which is not what you'd expect).

</para>
</section>


<section>
<title>Named and Positional Parameters</title>


<para>
There are two styles of supplying attributes to a tag:
<emphasis>named</emphasis> and <emphasis>positional</emphasis>.

</para><para>
In the <emphasis>named</emphasis> style, you supply attributes using
<literal><replaceable>key</replaceable>=<replaceable>value</replaceable></literal>
pairs,  just as with HTML:

<programlisting>
[value name=<replaceable>variable_name</replaceable>]
</programlisting>

The positional-style tag that accomplishes the same thing, but is more 
compact:

<!-- TODO: [tag pos1  ] makes pos1 in fact "pos1  " -->

<programlisting>
[value <replaceable>variable_name</replaceable>]
</programlisting>

Positional syntax, however, requires support by each tag individually. That
is, set of arguments that can be specified in positional notation (as
well as their position in the set) are fixed and determined in advance. You can
see a list of accepted positional arguments (and their implicit order) in
each tag's SYNOPSIS reference section; try &tag-value; for example.
</para><para>
<emphasis role='bold'>You cannot mix named and positional
attributes in the same tag</emphasis>; use either all named, or all positional.
</para><para>
Positional syntax is appropriate for simpler tags and 
&IC; interprets positional arguments slightly faster, but don't let 
premature optimization kick in &mdash; as
<ulink url="http://www.thocp.net/biographies/dijkstra_edsger.htm">Edsger W. Dykstra</ulink>
once said, "Premature optimization is the root of all programming evil".
</para><para>
In most cases, positional attributes (called <emphasis>parameters</emphasis>)
work the same as named attributes. However, <emphasis role='bold'>there are a
few situations where you must use named attributes</emphasis>:

<itemizedlist>
  <listitem><para>
  When you want to specify a parameter that, positionally, comes after a
  parameter that you want to omit, e.g. omit the first parameter but specify
  the second. The parser would have no way of knowing which is which, so
  you must revert to named syntax. This rarely happens, though, because the
  first positional parameter is usually required for a given tag anyway, and
  can't be omitted.
  </para></listitem>
  
  <listitem><para>
  When there is some ambiguity as to which parameter is which, usually
  due to whitespace. If the argument value contains any whitespace 
  (<emphasis role='bold'>even if it is enclosed in quotes!</emphasis>), you
	must use named syntax.
  </para></listitem>
  
  <listitem><para>
  When you need to interpolate the value of an attribute, such 
	as of <literal>default=</literal> in
	<code>[value name=time default="[time]"]</code>.
  </para></listitem>
  
  <listitem><para>
  When you are using looping subtags (Loop tags and subtags are explained below).
  </para></listitem>
</itemizedlist>
</para>
</section>


<section>
<title>HTML Comments</title>

<para>
&glos-ITL; also supports a special notation where you use HTML comment
markers with ITL inside, and where the comments are removed by &IC;
so that the tag results show up in the generated HTML page.
</para><para>
That means <code>[<replaceable>tagname</replaceable> <replaceable>...</replaceable>]</code>
and <code>&lt;!--[<replaceable>tagname</replaceable>
 <replaceable>...</replaceable>]--&gt;</code> are equivalent.
</para><para>
This allows you to make your raw ITL tags appear as comments in &glos-HTML;
browsers, and especially in HTML editors which might not like non-HTML markup
at random positions.
You might want to use this if your editor has trouble with
&glos-ITL; tags when editing &IC; page templates, or alternatively, if
you want to use one <literal>.html</literal> file both as an Interchange
page and as a static page delivered directly by your web server where no
&IC; processing is performed.
</para><para>
When you really wish to treat HTML comments as plain comments and not remove
them, then you must include a whitespace between the HTML comment delimiters
and the &glos-ITL; square brackets:

<programlisting><![CDATA[
<!--[value name]-->       becomes  Bill
<!-- [value name] -->     becomes  <!-- Bill -->
]]></programlisting>

ITL is &glos-interpolate;d in both cases however. To prevent &glos-ITL;
interpolation within HTML comments, you 
either need to see the &pragma-no_html_comment_embed; pragma, or enclose
the block in a special &glos-ITL; &tag-comment; tag instead of in 
HTML comment:

<programlisting><![CDATA[
[comment] [value name] [/comment]
]]></programlisting>

Besides not being interpolated at all, &tag-comment; blocks do not
appear in the final HTML sent to the client either, so you can be completely
safe regarding any unintentional code or information leakage.
</para><para>
While <literal>&lt;!--[</literal> and <literal>[</literal> are completely
interchangeable, the &IC; parser does not replace <literal>]--&gt;</literal>
with <literal>]</literal> unless it sees <literal>&lt;!--[</literal>
<emphasis>at least once somewhere on the page</emphasis>.
This is a small parsing speed optimization and shouldn't cause you any
trouble as you're supposed to be consistent in your syntax anyway.
<!-- TODO there's more theoretical stuff in APPENDICES in ictags -->
</para>
</section>


<section>
<title>Argument Interpolation</title>


<para>
When ITL tags are <emphasis>expanded</emphasis>, for example when 
<code>[value name]</code> yields the actual user's name, we say the tags 
are &glos-interpolate;d.
</para><para>
If you want to use one tag's output as another tag's input, you
must use named syntax and you must double-quote the
argument. For example, this <emphasis role='bold'>WILL NOT</emphasis> work:

<programlisting>
[page scan se=[scratch <replaceable>variable_name</replaceable>]]
</programlisting>

The above code is in really bad shape. To make it work, we
need to do two things: switch to named syntax, and properly quote arguments
containing whitespace:

<programlisting>
[page href=scan arg="se=[scratch <replaceable>variable_name</replaceable>]"]
</programlisting>

Note that the <arg choice='plain'>href</arg> argument did not need to be
quoted; <arg choice='plain'>arg</arg> did, because it
contained a whitespace and it contained a tag intended for interpolation
(<literal>[scratch variable_name]</literal>).
</para>

<note><para>
As you can implicitly see from the above example, attribute values
are normally interpolated (in other words,
<literal>se=[scratch variable_name]</literal> was expanded to
<literal>se=<replaceable>VARIABLE_VALUE</replaceable></literal>
before being passed as value to <literal>arg=</literal>.
</para>
<para>
However, when the attributes contain a dot (such as 
<literal>name.first=</literal> or <literal>name.last=</literal>),
their values <emphasis role='bold'>are not</emphasis>
&glos-interpolate;d by default. Their interpolation is controlled by the
&pragma-interpolate_itl_references; pragma, and more about this whole
concept can be learned below in <xref linkend="itl_arrays_and_hashes"/>.
</para>
</note>

</section>


<section>
<title>Deeper Look at Argument Quoting</title>
<!-- TODO Explain quoting on examples from [area] -->

<para>
The question is &mdash; exactly when can you omit the quotes around
argument values? First answer is trivial; never omit the quotes and you'll
never run into trouble.
</para>
<para>
The other answer says, "omitting quotes earns you a bonus for style and achieves
small parser speed improvement". However, if the value contains a whitespace,
you must quote it.
<!-- TODO whitespace and/or weird chars too? or it's matched by \S ? -->
To quote values, you can use double quotes (<literal>"</literal>),
single quotes (<literal>'</literal>) and 
pipes (<literal>|</literal>) interchangeably.
<!-- TODO mention `` -->
Pipes have the additional functionality of
removing leading and trailing whitespace, but generally you can use 
all types in combination to do three levels of quoting with ITL; for 
more deeply nested constructs, use direct &PERL; code.
</para><para>
Additionally, container tags
can be closed using "XML-style" syntax.
The following two lines are identical in effect:
<programlisting>
  [forum top="[item-code]" display_page=forum_display  ][/forum]
  [forum top="[item-code]" display_page=forum_display /]
</programlisting>
</para> 
<para>
Note, however, that <emphasis role='bold'>you can use "<literal>/]</literal>"
only with tags for which you provide no attributes, or the attributes are named
and quoted</emphasis>.
Positional attributes (<emphasis>parameters</emphasis>)
"absorb" everything (including the "<literal>/</literal>") up to the closing
bracket, and therefore using "/]" is not possible.
</para>
<para>
When using "/]" notation, it is still possible to provide body for the tag
by specifying <literal>body=</literal> attribute.
</para>
<para>
The above covers a good deal of quoting, but it's still not all
there is to it.
<emphasis>Loop subtags</emphasis>, which we explain some lines
below, are an exception to the rule and do not need quotes
(even though they sometimes contain whitespace),
because they are parsed earlier in a separate pass, before the
general parser takes on.
</para><para>
Here's an example with loop subtags that would work properly even
with quotes omitted. (Pay attention
to <code>[item-field url]</code> which, at first sight, looks like it is
invalid because it contains a space and is not quoted nor named.)
<programlisting>
[item-list]
[page [item-field url]]detailed info[/page] on [item-description]
[/item-list]
</programlisting>
</para>

<para>
You might wonder why unquoted tags are  allowed. The answer is
<emphasis>performance</emphasis>. If you have large lists of tags you can
achieve significant speed-ups by using positional attributes. Parsing and
disassembling named attributes takes some more CPU cycles.
</para>

</section>


<section>
<title>Accessing Perl from ITL</title>

<section>
	<title>Perl-related ITL tags</title>
<para>
Among ITL tags, &tag-perl;, &tag-calc;, &tag-calcn; and &tag-mvasp;
are used obtain direct access to the &PERL; language in &IC; pages.
In fact, all the ITL tags are only extensions (and convenience features)
built on top of &IC;'s Perl core, so all ITL tags boil down to Perl
code anyway. Using Perl directly could have the benefits of:
<itemizedlist>
<listitem><para>
Increasing page parsing speed (Perl blocks are evaluated directly)
</para></listitem>
<listitem><para>
Making complicated ITL constructs much easier, or even trivial
</para></listitem>
<listitem><para>
Enabling direct access to Interchange data structures (and code, and 
everything)
</para></listitem>
<listitem><para>
Unifying coding style
</para></listitem>
</itemizedlist>
</para>

<para>
Let's say we wanted to display user's real name in a page.
Here are three pieces of code, all achieving this effect, but using
different approaches to produce the result:
</para>

<para>
<emphasis role='bold'>Displaying user's real name using an ITL layer</emphasis>:
<programlisting>
[if value name]
  Your name is [value name], in case you forgot.

[else]
  I don't know your name.

[/else]
[/if]
</programlisting>
</para>

<para>
<emphasis role='bold'>Displaying user's real name by calling ITL tags from Perl</emphasis>:
<programlisting>
[calc]
  my $out;
  my $name = $Tag->value('name');

  if ($name) {
    $out = "Your name is $name, in case you forgot.";

  } else {
    $out = "I don't know your name.";

  }

  return $out;                                              
[/calc]                 
</programlisting>
</para>

<para>
<emphasis role='bold'>Displaying user's real name by accessing Interchange's data structures</emphasis>:
<programlisting>
[calc]
  my $out;
  my $name = $Values->{name};

  if ($name) {
    $out = "Your name is $name, in case you forgot.";

  } else {
    $out = "I don't know your name.";

  }

  return $out;                                              
[/calc]                 
</programlisting>
</para>

</section>
<section>
<title>Perl-related ITL syntax</title>
<para>
ITL also supports a special type of quoting, using backticks
(<literal>`</literal>), where the content is evaluated by &PERL;
and then passed as the usual argument value.
</para><para>
Using this backtick notation, you can conveniently perform quick, in-place
&PERL; evaluation of an argument, or pass complex data structures as 
attribute values.
</para>
<para>
<emphasis role='bold'>Performing quick, in-place argument interpolation</emphasis>:
<programlisting>
[cgi name=Magic_Number hide=1 set=`2 + 3 + $CGI->{magic}`]

The magic number is: [cgi Magic_Number]
</programlisting>
</para>
<para>
<emphasis role='bold'>Passing complex data structures as argument values</emphasis>:
<programlisting>
[cgi name=Magic_Structure hide=1 set=`{ key1 => 'val1', key2 => 'val2' }`]
</programlisting>
As you see, this notation (and implied functionality) is completely valid
and possible. It is then just up to the called tag to handle attribute value
appropriately.
</para>
<note>
<para>
<emphasis role='bold'>It is only possible to use the backticks notation with
named parameters!</emphasis>
</para>
</note>
<!-- TODO what happens with ITL code inside backticks ? -->
</section>

</section>

<section>
<title>Universal Attributes</title>


<para>
Universal attributes apply to all tags, although tags might specify
their own defaults for the attribute. The code implementing universal
attributes is independent of the routines that implement specific
tags.

</para><para>
We will explain <arg choice='plain'>interpolate</arg> and 
<arg choice='plain'>reparse</arg> attributes here. <emphasis role='bold'>
It is important to remember that the behavior of the
<arg choice='plain'>interpolate</arg> attribute (unfortunately) differs,
based on whether a tag is <emphasis>stand-alone</emphasis> or a
<emphasis>container</emphasis>.
In addition,
the <arg choice='plain'>reparse</arg> attribute is only used with
container tags.
</emphasis>

</para><para>
With standalone tags, the <arg choice='plain'>interpolate</arg> attribute
specifies whether the <emphasis>output</emphasis> of the tag will be
&glos-interpolate;d.<sbr/>
Output of most of the stand-alone tags is not interpolated by default.
Exceptions to this rule would include, for example, the &tag-include; tag.
</para><para>
With container tags, the <arg choice='plain'>interpolate</arg> attribute
specifies whether the <emphasis>tag body</emphasis> will be
&glos-interpolate;d before being passed to the tag. <sbr/>
The <arg choice='plain'>reparse</arg> attribute specifies whether
output will be &glos-interpolate;d.
</para><para>

<!-- TODO
- mention that users can see behavior in source context header (UserTag lines)
-->

</para><para>
For an interpolation example with container tags, let's assume the
user's name is Kilroy:

<programlisting>
[log interpolate=1][value name] was here[/log]

[log interpolate=0][value name] was here[/log]
</programlisting>

The first line would log "Kilroy was here" to
<filename><replaceable>&glos-CATROOT;</replaceable>/etc/log</filename>,
while the second line would log pretty useless "[value name] was here".
</para><para>

For an interpolation example with stand-alone tags, consider the following:

<programlisting>
[set name=now interpolate=0][time]%A, %B %d, %Y[/time][/set]
</programlisting>

We've set the scratch variable <varname>new</varname> to not contain the
actual date, but the ITL code to calculate and display the date each time
it's called. Let's assume today is Monday, January 1, 2001, and we have the
following code:

<programlisting>
[scratch name=now interpolate=1]

[scratch name=now interpolate=0]
</programlisting>

The first line would then produce the expected
<literal>Monday, January 1, 2001</literal>, while the second would
leave us with unusable <literal>[time]%A, %B %d, %Y[/time]</literal>.
</para><para>
The example above serves to show <arg choice='plain'>interpolate</arg> used
with a stand-alone tag. This behavior can only be achieved by using
<arg choice='plain'>reparse</arg> attribute if you're having a container 
instead of the stand-alone tag.

</para><para> <sbr/><sbr/>
The <arg choice='plain'>reparse</arg> attribute is only used with container
tags, and specifies whether the tag <emphasis>output</emphasis> will be
&glos-interpolate;d. This is basically the same as the
<arg choice='plain'>interpolate</arg> attribute for stand-alone tags, but a
new name had to be invented because <arg choice='plain'>interpolate</arg>
already performed a different function with container tags, when 
this functionality was to be added.

</para><para>
Most container tags will have their output re-parsed for more
Interchange tags by default. If you wish to prevent this behavior, you
must explicitly set the <arg choice='plain'>reparse</arg>
attribute to a &glos-false; value. Note, however, that you will
almost always want the default action. Probably the only ITL tag that
doesn't reparse by default is &tag-mvasp;.

</para><para>
Here's an example. Again, assuming the user's name is Kilroy,

<programlisting>
[perl reparse=1]
   my $tagname = 'value';
   return "[$tagname name] was here\n"
[/perl]

[perl reparse=0]
   my $tagname = 'value';
   return "[$tagname name] was here\n"
[/perl]
</programlisting>

expands to

<programlisting>
Kilroy was here

[value name] was here
</programlisting>

</para><para>
In &IC; 5.3.1, the &pragma-no_default_reparse; pragma was added, which 
disables the default reparsing of container tags' output. It is therefore
advisable to always specify the <literal>reparse=1</literal> attribute at
places where you want reparsing to really occur.

</para><para> <sbr/><sbr/>
The third attribute, <arg choice='plain'>send</arg>, was deprecated long ago
and will only be described for historical reference.
<!-- TODO -->
</para>
</section>


<section>
<title>Tag-specific Attributes</title>


<para>
Each tag may accept additional arguments which vary from tag to
tag. For each tag individually, you need to consult the 
appropriate reference page to learn tag-specific parameters and attributes.
Note, however, that the tag arguments do not necessarily have to be announced
in the tag definition header; sometimes they're used pretty much
<emphasis>ad-hoc</emphasis>, but we are making sure to keep the documentation
up to date. We kindly ask you to inform us of any errors or omissions in the
documentation.
</para>
</section>



<section id="itl_arrays_and_hashes">
<title>Attribute Arrays and Hashes</title>


<para>
Instead of just plain values, for some tags it would be particularly convenient
if they accepted &glos-array;s or &glos-hash;es of argument values, much like 
you could do if you used &PERL; directly. Fortunately, &glos-ITL; supports
that too! For an ordinary tag, the syntax is as follows:

<programlisting>
<replaceable>attribute</replaceable>.<replaceable>ARRAY_INDEX</replaceable>=<replaceable>value</replaceable>

<replaceable>attribute</replaceable>.<replaceable>HASH_KEY</replaceable>=<replaceable>value</replaceable>
</programlisting>

<replaceable>ARRAY_INDEX</replaceable> is an integer array index starting
from <literal>0</literal> (this is due to standard programming practice and
&PERL; behavior). Note that you cannot have both an array and a hash 
attribute of the same name (even though that would be possible in pure
&PERL;).

</para><para>
Here is an example of an array-based attribute:

<programlisting>
search.0="se=hammer
          fi=products
          sf=description"

search.1="se=plutonium
          fi=products
          sf=comment"
</programlisting>


</para><para>
<emphasis role='bold'>It is up to each individual tag to handle an
array or hash value properly</emphasis>.
See the documentation for the specific tag before passing
it an attribute array or hash value.
The &tag-page; tag, for example, would treat a search specification array
(the structure we've shown above) as a joined search (one of different
search types we support).
<!-- TODO link to something on joined searches or
searching in general; we can't leave the reader dry -->
</para>

<para>
On the &PERL; level, before passing attributes to a tag, &IC; parser would
convert attributes to an anonymous array reference.

</para><para>
If you were passing the above example directly to a tag named
<literal>ROUTINE</literal>
within a &tag-perl; block or your custom tag, you would actually pass an
anonymous array as the value of the attribute:

<programlisting><![CDATA[
my $arrayref = [ "se=hammer/fi=products/sf=description",
                 "se=plutonium/fi=products/sf=description", ];

$Tag->ROUTINE( { search => $arrayref } );
]]></programlisting>

Similarly, to use a hash reference in some other occasion:

<programlisting><![CDATA[
my $hashref = { name   => "required",
                date   => 'default="%B %d, %Y"', };

$Tag->ROUTINE( { entry => $hashref } );
]]></programlisting>
</para>


<para>
Pay attention to the fact that with array- or hash-based attributes,
their values <emphasis role='bold'>are not interpolated</emphasis>.
It means that, at places where scalar options
<emphasis role='bold'>are</emphasis> interpolated (such as
<code>[tag option='[time]']</code>, resulting in &tag-time; expanding to
the current time), reference-based attributes are not (such as
<code>[tag my.option='[time]']</code>, which would result in literal
"<literal>[time]</literal>" being passed to the attribute "my.option".
Interpolation of reference-based attributes can be enabled by
setting the &pragma-interpolate_itl_references; pragma.
</para>

</section>


<section id="LoopingTags">
<title>Looping Tags and Sub-tags</title>


<para>
Certain tags can only appear in a special context, usually nested within
other, parent tags. Those include, for example, the ones interpreted as part
of a surrounding loop tags, such as 
&tag-loop;, &tag-item-list;, &tag-query; or <tag>search-region</tag>.

</para><para>
Some of those subtags are 
<replaceable>PREFIX</replaceable>-accessories,
<replaceable>PREFIX</replaceable>-alternate,
<replaceable>PREFIX</replaceable>-calc,
<replaceable>PREFIX</replaceable>-change,
<replaceable>PREFIX</replaceable>-code,
<replaceable>PREFIX</replaceable>-data,
<replaceable>PREFIX</replaceable>-description,
<replaceable>PREFIX</replaceable>-discount,
<replaceable>PREFIX</replaceable>-discount-subtotal,
<replaceable>PREFIX</replaceable>-field,
<replaceable>PREFIX</replaceable>-increment,
<replaceable>PREFIX</replaceable>-last,
<replaceable>PREFIX</replaceable>-line,
<replaceable>PREFIX</replaceable>-modifier,
<replaceable>PREFIX</replaceable>-next,
<replaceable>PREFIX</replaceable>-param,
<replaceable>PREFIX</replaceable>-pos,
<replaceable>PREFIX</replaceable>-price,
<replaceable>PREFIX</replaceable>-quantity,
<replaceable>PREFIX</replaceable>-subtotal,
if-<replaceable>PREFIX</replaceable>-data,
if-<replaceable>PREFIX</replaceable>-field,
if-<replaceable>PREFIX</replaceable>-param,
if-<replaceable>PREFIX</replaceable>-pos,
<replaceable>PREFIX</replaceable>-modifier-name and
<replaceable>PREFIX</replaceable>-quantity-name.

</para><para>
In each of the above, <replaceable>PREFIX</replaceable> represents an
arbitrary prefix that is used in that looping tag; this is needed to be able
to support nesting in arbitrary order and to arbitrary level.
<emphasis>All of the
subtags are only interpreted within their container tags (they can only
appear inside  their parent tags' bodies) and they only accept
positional parameters</emphasis>. The default prefixes follow:


<informaltable pgwide='1' frame='none'>
<tgroup cols='3' align='left'>
<colspec colname='tag'/>
<colspec colname='prefix'/>
<colspec colname='example'/>

<thead>
<row>
<entry>Parent tag</entry>
<entry>Default prefix</entry>
<entry>Example sub-tag</entry>
</row>
</thead>
<tbody>

<row>
  <entry>&tag-loop;
  </entry>
  <entry><literal>loop</literal>
  </entry>
  <entry>
	<code>[loop-code]</code><sbr/>
	<code>[loop-field price]</code><sbr/>
	<code>[loop-increment]</code><sbr/>
  </entry>
</row>

<row>
  <entry><tag>item-list</tag>
  </entry>
  <entry><literal>item</literal>
  </entry>
  <entry>
	<code>[item-code]</code><sbr/>
	<code>[item-field price]</code><sbr/>
	<code>[item-increment]</code><sbr/>
  </entry>
</row>

<row>
  <entry><tag>search-region</tag>
  </entry>
  <entry><literal>item</literal>
  </entry>
  <entry>
	<code>[item-code]</code><sbr/>
	<code>[item-field price]</code><sbr/>
	<code>[item-increment]</code><sbr/>
  </entry>
</row>

<row>
  <entry>&tag-query;
  </entry>
  <entry><literal>sql</literal>
  </entry>
  <entry>
	<code>[sql-code]</code><sbr/>
	<code>[sql-field price]</code><sbr/>
	<code>[sql-increment]</code><sbr/>
  </entry>
</row>

<row>
  <entry>&tag-tree;
  </entry>
  <entry><literal>item</literal>
  </entry>
  <entry>
	<code>[item-code]</code><sbr/>
	<code>[item-field price]</code><sbr/>
	<code>[item-increment]</code><sbr/>
  </entry>
</row>

</tbody>
</tgroup>
</informaltable>

</para><para>
Sub-tag behavior is consistent among the looping tags. 
</para>

<important><para>
As we've said already, subtags are parsed before the standard parsing routine
takes on; that means <emphasis>before any regular tags within the
loop</emphasis>. This has a subtle effect; it can, for example, prevent the
usual tags from accepting looping tags' values as attributes. In such cases,
look for "subtag" (prefixed) variants of the usual tags.
<!-- TODO example -->
</para></important>

<para>
Speaking of loops and &PERL;, there are two types of records that &IC; can
return with looping lists: ARRAY and HASH.

</para><para>
An array list is the normal output of the &tag-query; and &tag-loop; tags,
or of a search operation. In those cases, fields specified in 
<mv>mv_return_fields</mv> (or those specified in SQL) are returned for
each selected row.
The two queries below are essentially identical:

<programlisting>
[query sql="select foo, bar from products" /]

[loop search="
                ra=yes
                fi=products
                rf=foo,bar
"]
</programlisting>

Both will return an array of arrays consisting of the 
<database class='field'>foo</database> and
<database class='field'>bar</database> columns.
The corresponding &PERL; data structure would look like this 
(familiarity with the output from <classname>Data::Dumper</classname> Perl
module helps here):

<programlisting>
[
    ['foo0', 'bar0'],
    ['foo1', 'bar1'],
    ['foo2', 'bar2'],
    ['fooN', 'barN'],
]
</programlisting>

A hash list is the normal output of the &tag-item-list; tag. It returns
the value of all return fields in an array of hashes. A normal return
might look like this:

<programlisting>
[
    {
        code     => '99-102',
        quantity => 1,
        size     => 'XL',
        color    => 'blue',
        mv_ib    => 'products',
    },
    {
        code     => '00-341',
        quantity => 2,
        size     => undef,
        color    => undef,
        mv_ib    => 'products',
    },

]
</programlisting>

However, you can explicitly request hash lists to be returned from
queries:

<programlisting>
[query sql="select foo, bar from products" type=hashref /]
</programlisting>

The data structure returned would then be:

<programlisting>
[
    { foo => 'foo0', bar => 'bar0' },
    { foo => 'foo1', bar => 'bar1' },
    { foo => 'foo2', bar => 'bar2' },
    { foo => 'fooN', bar => 'barN' },
]
</programlisting>

<!-- TODO put somewhere
PREFIX-field"]PREFIX-field (Optimization note- one query per field if you use this; we optimize around this if only one products table) 
-->
</para>
</section>




<para>












<!-- TODO

Explain quoting here

<programlisting><![CDATA[
<a href="[area form="
mv_todo=refresh
mv_order_item=000101
mv_order_fly=description=An on-the-fly item|price=100.01
"]">Order item 000101</a>
]]></programlisting>





-->
