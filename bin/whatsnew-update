#! /usr/bin/perl

# docelic@icdevgroup.org

# The script parses a directory which is a copy of interchange-cvs 
# mail archives and extracts log messages to a whatsnew file.

use warnings;
use strict;
use Data::Dumper;
use Getopt::Long;
use Fcntl qw/:DEFAULT :flock/;

{ no warnings;
$Data::Dumper::Indent = 1;
$Data::Dumper::Terse++;
$Data::Dumper::Sortkeys++;
}

my $archive_dir = "whatsnew/ml";
my $verbose = 0;
my $output = "whatsnew/WHATSNEW.xml";
my $entry_string = "<!-- AUTO UPDATER -->";
my @template = <DATA>;
my $template = join "", @template;
my $final_content;

unless ( GetOptions ( 
	"verbose|v!" => \$verbose,
	"output|o=s" => \$output,
	"archive-dir|a=s" => \$archive_dir,
	"entry-string|e|s=s" => \$entry_string,
)) { die "Error parsing options\n" }

# Load list of received emails in @archive
my @archive;

unless (@archive = file_list($archive_dir)) {
	warn "$0: No files in archive directory '$archive_dir'\n";
	exit 0;
}

## Load list of already parsed messages and delete parsed ones from %archive
#open IN, "< whatsnew/parsed" or die "Can't open whatsnew/parsed ($!)\n";
#while ($_ = <IN>) {
#	chomp;
#	@archive = grep{!/^$_$/} @archive;
#}
#close IN;

# Read all messages and expand template for each
for $_ (@archive) {
	my ($user,$date, $log, $affected) = read_log($_);
	next if !$date and $user == 0;
	
	my $sect = eval "\"$template\"";
	$final_content .= $sect;
	#print "Here's a cookie:\n$sect\n";
}

# Finally, update .xml
open IN, "< $output" or
	die "Can't open $output ($!)\n";
my @wn = <IN>;
close IN;

my $count = 0;
for $_ (@wn) {
	/^($entry_string)$/ and do {
		$_ = "$entry_string\n$final_content";
	}
}

# And delete parsed stuff
unlink for @archive;

open OUT, "> $output";
print OUT @wn;
close OUT;

exit 0;

###################################################################
# Helpers below

sub file_list {
	my $dir = shift;
	my ($file, @files);

	if (-d $dir) {
		opendir (DIR, $dir)
			|| die "$0: failed to enter directory '$dir'\n";
		while ($file = readdir(DIR)) {
			if (-f "$dir/$file") {
				push(@files, "$dir/$file");
			}
		}
		closedir (DIR);
	}

	return reverse @files;
}

sub read_log {
	open IN, "< $_[0]" or die "Can't open $_[0] ($!)\n";
	my @file = <IN>;
	close IN;
	#chomp for @file;
	my (@log, $user, $date, @affected, $log, $affected);

	my $run = 0;
	for $_ (@file) {
		/^(<pre>)?User:\s+(\S+)$/ and $user = $2 ? $2 : $1;
		/^Date:\s+(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2} GMT)$/ and $date = $1;
		/^((Modified|Added|Removed):\s.*)$/ and push @affected, $1;
		/^Log:$/ and do { $run++; next };
		/^Revision\s+Changes\s+Path$/ and $run=0;
		$run and push @log, $_;
	}

	# We're interested in HEAD commits only
	return 0 if grep {/-branch/} @affected;

	s/^\s+// for @affected;
	s/\s+$// for @affected, @log;
	s/\t/  /g for @log;

	$affected = join "\n", @affected;
	$log = join "\n", @log;

	$affected =~ s/^\n+//; $affected =~ s/\n+$//;
	$log =~ s/^\n+//; $log =~ s/\n+$//;

	( $user, $date, $log, $affected )
}


__DATA__
<para><literallayout>
<emphasis role='bold'>
Developer: $user
Date: $date
$affected</emphasis>
$log
</literallayout></para>


