#!/usr/bin/perl

# Generic .xml generator
# Currently builds glossary or howtos.
# Invoke as: bin/generic-autogen NAME
# (It creates NAME/NAME.xml with files from NAME/*)

use warnings;
use strict;

use Data::Dumper;

my %items;
my %alphabet;
my $verbose = 0;
my $cat = shift; $cat ||= "glossary";
my %invalid;
my $invalid_file = "tmp/missing2";
my @loaded;
my $document;
my $visible_name;
my %sn = ( # short name
	glossary => "glos",
	howtos => "howto",
);
my %ln = ( # long name
	glossary => "glossary entry",
	howtos => "HOW-TO",
);

my %header = ( # item head
	glossary => "<section id=\"\$file\">
<title>\$visible_name</title>

<para>
",
	howtos => "<section>
<title>\$visible_name</title>

<para>",
);
my %footer = ( # item tail
	glossary => "\n</para>\n</section>\n\n",
	howtos => "\n</para>\n</section>\n\n",
);

# HEAD
my $glossary = <<__ENDP__;
<?xml version="1.0" standalone="no"?>

<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook-Interchange XML V4.2//EN"
  "../docbook/docbookxi.dtd">

<article>
	<title>Interchange Documentation: Glossary</title>

__ENDP__
my $howtos = <<__ENDP__;
<?xml version="1.0" standalone="no"?>

<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook-Interchange XML V4.2//EN"
  "../docbook/docbookxi.dtd">

<article id="howtos">
	<title>Interchange Documentation: HOW-TO Collection</title>

__ENDP__

# OPEN GLOSSARY ENTITIES
print "GEN: docbook/auto$cat.ent\n";
open ENT, "> docbook/auto$cat.ent" or
	die "Can't wropen docbook/$cat.ent ($!)\n";

# LOAD ITEMS
opendir DIR, $cat or die "Can't open $cat/ ($!)\n";
readdir DIR; readdir DIR;

# Read all elements from a directory
while ( my $file = readdir DIR ) {
	next if $file =~ /^\.|^CVS|\.xml$/;
	open IN, "< $cat/$file" or die "Can't read-open $cat/$file ($!)\n";

	if ( $cat eq 'howtos' ) {
		$visible_name = <IN>;
	} else {
 		( $visible_name = $file ) =~ s/-/ /g;
	}
	
	$items{$file} = [ prefix($cat, $file), <IN>, suffix($cat, $file) ];
	$alphabet{ lc(substr($file, 0, 1)) }++;
	push @loaded, $file;

	my $link = "<olink targetdoc='$cat' targetptr='$file'>$visible_name</olink>";
	my $more = $cat eq 'howtos' ? " $ln{$cat}" : "";

	print ENT <<ENDO;
<!ENTITY $sn{$cat}-$file "$link$more">
ENDO
	print "Added $file\n" if $verbose;

	close IN or warn "Error closing $cat/$file ($!)\n";
}
closedir DIR or warn "Error closing $cat/ ($!)\n";

# Find TODO notes or XML comments
while (my ($k,$v)= each %items ) {
	"@$v" =~ m/TODO/s and push @{ $invalid{$k} }, "Contains TODO item";
	"@$v" =~ m/<!--/s and push @{ $invalid{$k} }, "Contains XML comment";
}


# ADD ITEMS TO HEAD  (TYPE-SPECIFIC)
if ( $cat eq 'glossary' ) {
	$document = $glossary;
	for my $letter ( sort keys %alphabet ) {
		next unless $alphabet{$letter}; # Next if no entries on that letter
		print "Passed on $letter\n" if $verbose;

		# Code that was doing separations by letter. (like A.. B..).
		# This isn't applicable any more since we've switched to 
		# doctype 'article' instead of 'glossary'.
		#$document .= '<glossdiv id="' . uc($letter) . '"><title>' .
		#	uc($letter) . '</title>' . "\n";

		my @keys = sort grep {/^$letter/i} keys %items;
		for my $key ( @keys ) {
			print "FOUND KEY $key\n" if $verbose;
			$document .= join "", @{ $items{$key} };
		}
		#$document .= '</glossdiv>' . "\n";
	}
	$document .= '</article>';

} elsif ( $cat eq 'howtos' ) {
	$document = $howtos;
	for my $howto ( @loaded ) { # order is as on filesystem
		print "Processing $howto\n" if $verbose;
		$document .= join "", @{ $items{$howto} };
	}
	$document .= '</article>';
}


# SAVE OUT
print "GEN: $cat/$cat.xml\n";
open OUT, "> $cat/$cat.xml" or
die "Can't wropen $cat/$cat.xml ($!)\n";
print OUT $document;
close OUT or warn "Cant close $cat/$cat.xml ($!)\n";

# Print out missing list
print "GEN: tmp/missing2\n";
open OUT, "> tmp/missing2" or
die "Can't wropen tmp/missing2 ($!)\n";
print OUT Dumper \%invalid;
close OUT or warn "Cant close tmp/missing2 ($!)\n";


exit 0;

################################################################
# Helpers below

sub prefix {
	my ($cat, $file) = @_;
	if ( $header{$cat} ) {
		my $tmp = $header{$cat};
		$tmp =~ s/(\$\w+)/$1/gee;
		return $tmp;
	}
	""
}

sub suffix {
	my ($cat, $file) = @_;
	if ( $footer{$cat} ) {
		my $tmp = $footer{$cat};
		$tmp =~ s/(\$\w+)/$1/gee;
		return $tmp;
	}
	""
}
