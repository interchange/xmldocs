<?xml version="1.0" standalone="no"?>

<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook-Interchange XML V4.2//EN"
	"../docbook/docbookxi.dtd">

<article id='xmldocs'>

<articleinfo>
	<title>Interchange Guides: XMLDOCS Authoring</title>
	<titleabbrev>xmldocs</titleabbrev>

	<copyright>
		<year>2005</year>
		<holder>Davor Ocelic</holder>
	</copyright>
	<copyright>
		<year>2005</year>
		<holder>Interchange Development Group</holder>
	</copyright>

	<authorgroup>
		<author>
			<firstname>Davor</firstname><surname>Ocelic</surname>
			<email>docelic@icdevgroup.org</email>
		</author>
	</authorgroup>

	<legalnotice>
		<para>
		<phrase condition="online">[restrict log='none']</phrase>
		This documentation is free; you can redistribute it and/or modify
		it under the terms of the &GNU; General Public License as published by
		the Free Software Foundation; either version 2 of the License, or
		(at your option) any later version.
		</para>
		<para>
		It is distributed in the hope that it will be useful,
		but WITHOUT ANY WARRANTY; without even the implied warranty of
		MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
		GNU General Public License for more details.
		</para>
	</legalnotice>

	<abstract>
		<para>
		</para>
	</abstract>

</articleinfo>


<sect1>
	<title>XMLDocs Basics</title>
	<para>
	Since XMLDOCS is based on &DOCBOOK; XML, the usual DocBook XML rules apply:
	XML markup consists of XML "tags" (same style as &glos-HTML; tags), but
	all of which must be opened (and closed &mdash; you cannot omit the
	closing tag) respecting the hierarchy of tags within a document.
	In addition, attributes must always be quoted. These two rules
	are non-negotiable with DocBook XML. Here's an example:
<screen><![CDATA[
<?xml version="1.0" standalone="no"?>

<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook-Interchange XML V4.2//EN"
	"../docbook/docbookxi.dtd">

<article id='xmldocs'>

<sect1>
	<title>Test title</title>

  <para> <!-- COMMENT: Beginning of a paragraph -->
  
  It is <emphasis>very</emphasis> important to read this line.
  Some lines are <emphasis role='bold'>boldly bolder</emphasis> than others.
  The <database>products</database> database contains products.
  </para>
</sect1>

</article>
]]></screen>
	As you can see, XML can look structured and all, but there's so much overhead
	involved in writing XML documentation. For example, I wouldn't know offhand
	how to define DOCTYPE properly &mdash; I just took the effort of learning it
	once, and I kept copy/pasting it ever since.
	</para><para>
	XMLDOCS aims to be as overhead-free and efficient as possible to write.
	This, however, leads us to mention <emphasis>four</emphasis> main differences
	between DocBook XML and XMLDOCS:
	<itemizedlist>
	<listitem><para>
	A lot of XMLDOCS markup <emphasis role='bold'>and</emphasis> content is
	autogenerated. For example, all &IC; source code shown is taken
	out of CVS, and is therefore always up to date. The same goes for
	information such as say, file version numbers and modification times.
	</para></listitem>
	<listitem><para>
	Instead of writing complete XML documents (those that contain XML
	"head and tail" and would be valid if taken standalone), in XMLDOCS 
	you only need to
	provide short blocks of input to predefined "slots". These slots
	already provide all needed XML wrapping, so you can get onto writing
	actual text right away. For example, the opening
	<literal>&lt;para&gt;</literal> and the closing
	<literal>&lt;/para&gt;</literal> are always part of the template, so
	you can (and in fact, must) omit them when filling in the
	documentation slots.
	</para></listitem>
	<listitem><para>
	DocBook XML supports "entities". Entities are something like variables
	and are inserted using
	<literal><replaceable>&amp;NAME;</replaceable></literal> syntax.
	XMLDOCS contain a ton of predefined &IC;-suitable entities, to both
	reduce typing
	and to "formalize" the look and feel. Compare the clarity and convenience
	of the below examples:
<screen><![CDATA[
<!-- Generic DocBook XML way: -->
Please see the <olink targetdoc='confs' targetptr='Catalog'><option>Catalog</option></olink> configuration directive.

<!-- XMLDOCS way: -->
Please see the &conf-Catalog; configuration directive.


<!-- Or, another example: -->

Add the following to your <filename>catalog.cfg</filename>:

Add the following to your &ccf;:
]]></screen>
	</para></listitem>
	<listitem><para>
	In XMLDOCS, we use a controlled set of XML tags, plus few &IC;-specific
	ones. For example, all &PERL; functions are marked up using 
	DocBook XML's &lt;function&gt;, while all "mv" variables are marked up using
	our custom &lt;mv&gt; tag.
	</para></listitem>
	</itemizedlist>
	</para>
</sect1>

<sect1>
	<title>XMLDOCS Set of Tags</title>
	<para>
	Here's the reduced set of DocBook XML tags (and our custom ones) at your
	disposal in XMLDOCS (in alphabetical order):
	</para>

	<para>
	<ulink url="http://www.docbook.org/tdg/en/html/application.html">application</ulink> - software program name, such as <application>QuickBooks</application><sbr/>
	<ulink url="http://www.docbook.org/tdg/en/html/arg.html">arg</ulink> - part of the Synopsis line, can be used with choice = <literal>plain</literal>, <literal>opt</literal> (default) or <literal>required</literal> to decorate argument with nothing, [], or {} appropriately <sbr/>
	<ulink url="http://www.docbook.org/tdg/en/html/blockquote.html">blockquote - quotes, citations</ulink><sbr/>
	<ulink url="http://www.docbook.org/tdg/en/html/classname.html">classname</ulink> - Perl module name, such as <classname>Image::Size</classname><sbr/>
	<ulink url="http://www.docbook.org/tdg/en/html/code.html">code</ulink> - chunks of actual code. Use to display ITL/Perl/any-other code examples inline, such as <code>[scratch tempvar]</code><sbr/>
	<ulink url="http://www.docbook.org/tdg/en/html/command.html">command</ulink> - computer command name (usually Unix command), such as <command>ls</command><sbr/>
	<ulink url="http://www.docbook.org/tdg/en/html/computeroutput.html">computeroutput</ulink> - output as you would get from a computer, such as the output of <command>ls</command><sbr/>
	<ulink url="http://www.docbook.org/tdg/en/html/constant.html">constant</ulink>, such as <constant>MAXPATHLEN</constant><sbr/>
	<ulink url="http://www.docbook.org/tdg/en/html/database.html">database</ulink> - everything related to a database. Used to mark up tables or table fields (use class='field' attribute for fields), such as <database>products</database> or <database class='field'>sku</database><sbr/>
	<ulink url="http://www.docbook.org/tdg/en/html/emphasis.html">emphasis</ulink> - renders as <emphasis>italic</emphasis> or <emphasis role='bold'>bold with role='bold'</emphasis><sbr/>
	<ulink url="http://www.docbook.org/tdg/en/html/envar.html">envar</ulink> - environment variable, usually as seen by the web server or IC, such as <envar>REMOTE_PORT</envar><sbr/>
	<ulink url="http://www.docbook.org/tdg/en/html/errorcode.html">errorcode</ulink> - some error code, such as <errorcode>6</errorcode><sbr/>
	<ulink url="http://www.docbook.org/tdg/en/html/errorname.html">errorname</ulink> - error name, such as <errorname>ENOENT</errorname><sbr/>
	<ulink url="http://www.docbook.org/tdg/en/html/errortext.html">errortext</ulink> - such as <errortext>Page not found</errortext><sbr/>
	<ulink url="http://www.docbook.org/tdg/en/html/filename.html">filename</ulink> - file and directory (class='directory') names, such as <filename>/etc/syslog.conf</filename> or <filename class='directory'>/etc/init.d/</filename><sbr/>
	filter - Interchange filter name (XMLDOCS extension to DocBook XML), such as <filter>entities</filter><sbr/>
	<ulink url="http://www.docbook.org/tdg/en/html/function.html">function</ulink> - function name, such as <function>syscall64()</function><sbr/>
	<ulink url="http://www.docbook.org/tdg/en/html/group.html">group</ulink> - grouping of arguments inside Synopsis line<sbr/>
	<ulink url="http://www.docbook.org/tdg/en/html/guibutton.html">guibutton</ulink> - identify buttons in the web gui, such as <guibutton>Finalize!</guibutton><sbr/>
	<ulink url="http://www.docbook.org/tdg/en/html/guiicon.html">guiicon</ulink> - icon in the web gui<sbr/>
	<ulink url="http://www.docbook.org/tdg/en/html/guilabel.html">guilabel</ulink> - label in the web GUI<sbr/>
	<ulink url="http://www.docbook.org/tdg/en/html/guimenu.html">guimenu</ulink> - menu in the web GUI<sbr/>
	<ulink url="http://www.docbook.org/tdg/en/html/guisubmenu.html">guisubmenu</ulink> - submenu in the web gui<sbr/>
	<ulink url="http://www.docbook.org/tdg/en/html/hardware.html">hardware</ulink> - piece of hardware, such as <hardware>motherboard</hardware><sbr/>
	<ulink url="http://www.docbook.org/tdg/en/html/important.html">important</ulink> - important block, stands out<sbr/>
	<ulink url="http://www.docbook.org/tdg/en/html/itemizedlist.html">itemizedlist</ulink> - wrapper for a bulleted list<sbr/>
	<ulink url="http://www.docbook.org/tdg/en/html/keysym.html">keysym</ulink> - Key sym, such as <keysym>Ctrl+c</keysym><sbr/>
	<ulink url="http://www.docbook.org/tdg/en/html/listitem.html">listitem</ulink> - element inside itemizedlist<sbr/>
	<ulink url="http://www.docbook.org/tdg/en/html/literal.html">literal</ulink> - every literal (verbatim) value, such as <literal>standard keep</literal><sbr/>
	<ulink url="http://www.docbook.org/tdg/en/html/note.html">note</ulink> - note block, stands out<sbr/>
	<ulink url="http://www.docbook.org/tdg/en/html/olink.html">olink</ulink> - linking between separate documents<sbr/>
	<ulink url="http://www.docbook.org/tdg/en/html/para.html">para</ulink> - the standard paragraph element, used all over the place<sbr/>
	<ulink url="http://www.docbook.org/tdg/en/html/programlisting.html">programlisting</ulink> - example of code or text that the user is supposed to enter<sbr/>
	<ulink url="http://www.docbook.org/tdg/en/html/replaceable.html">replaceable</ulink> - identify replaceable parts everywhere, such as <replaceable>PID</replaceable> in <command>kill -9 <replaceable>PID</replaceable></command><sbr/>
	<ulink url="http://www.docbook.org/tdg/en/html/returnvalue.html">returnvalue</ulink> - command return value<sbr/>
	<ulink url="http://www.docbook.org/tdg/en/html/sbr.html">sbr</ulink> - starts a newline. Useful in Synopsis, or if you don't want to split the paragraph in two, which then generates a wide spacing<sbr/>
	<ulink url="http://www.docbook.org/tdg/en/html/screen.html">screen</ulink> - used as element in which you display existing interchange source (this is mostly in autogenerated pages but can be used manually)<sbr/>
	<ulink url="http://www.docbook.org/tdg/en/html/subscript.html">subscript</ulink><sbr/>
	<ulink url="http://www.docbook.org/tdg/en/html/superscript.html">superscript</ulink><sbr/>
	<ulink url="http://www.docbook.org/tdg/en/html/systemitem.html">systemitem</ulink> - various system items, see possible class="" values<sbr/>
	<ulink url="http://www.docbook.org/tdg/en/html/tip.html">tip</ulink> - tip block, stands out<sbr/>
	<ulink url="http://www.docbook.org/tdg/en/html/ulink.html">ulink</ulink> - link to external resources<sbr/>
	<ulink url="http://www.docbook.org/tdg/en/html/warning.html">warning</ulink> - warning block, stands out<sbr/>
	<ulink url="http://www.docbook.org/tdg/en/html/xref.html">xref</ulink> - link within the same document<sbr/>
<phrase condition="online">[/restrict]</phrase>
	</para>

</sect1>
</article>

<!--

<sect1 id="Conclusion">
<title>Conclusion</title>
<para>
I believe I have succeeded in making XMLDOCS fairly convenient to author
new documents and keep them current with time.
</para>
<para>
If we want to make &IC; recognized globally (for which it definitely
has the perspective, but it's not there just yet), then having a complete,
up to date, clear and verbose documentation set is something that's
almost implied.
</para>
<para>
It would be best if all developers would write both the pieces of
software and the accompanying documentation. However,
from the past I have somehow seen that you are not too willing
to write the documentation (or that was because of all the problems with
the old documentation system).
</para>
<para>
So, the bottom line is that I really want you to write the documentation,
but I will not impose any requirements on the structure. That means
you can:
</para>

<itemizedlist>
	<listitem><para>
	Update the existing files with proper XML formatting, or
	</para></listitem>
	<listitem><para>
	Update the existing files <emphasis>without</emphasis> properly tagging
	everything. I will be monitoring all commits and I am willing to fix
	all the formatting if you're willing to write the docs in the first
	place. Or, 
	</para></listitem>
	<listitem><para>
	Provide verbose commit messages <emphasis>and state that you will
	not</emphasis> update the documentation, so me or Racke will reformat
	it properly and commit it to XMLDOCS, or
	</para></listitem>
	<listitem><para>
	You can write completely unformated text without even using XML and
	commit it somewhere in the
	<filename class='directory'>pending/</filename> directory. Me or Racke
	would pick it up and properly update the docs. Just please include 
	enough information (be as verbose as possible), so that we have enough
	words we can rephrase and enough information to work on.
	</para></listitem>
</itemizedlist>

<para>
Also, commit any goodies you might have to
<filename class='directory'>pending/</filename>.
</para>

</sect1>


<sect1 id='FileFormats'>
<title>File Formats</title>

<para>
<emphasis role='bold'>
This is an irrelevant section. Read it only if the examples from the
already written documentation are not enough, and you need some more 
hints.
</emphasis>
</para>

<para>
There are few different file types whose structure needs to be specified:
</para>

<sect2>
	<title>Guides</title>
	<para>
	Guides use no pre-processing and are written in pure XML. There
	is a simple "preprocessor" script I wrote in <filename>bin/pp</filename>,
	but it's up to you to put the source through it and commit valid XML
	to the CVS. For the usage examples and features, see script header.
	(It comes handy when you're writing large portions of XML from scratch).
	What you can use are, of course - just like in any other XML chunk,
	the XML entities defined in <filename>docbook/literals.ent</filename> and
	<filename>docbook/autodefs.ent</filename>. For manual entity definitions,
	always use the former file; the latter is autogenerated and automaintained.
	</para>
</sect2>

<sect2>
	<title>HOW-TOs</title>
	<para>
	HOW-TOs do not use any preprocessing/autogenerating layer either, but 
	are included in the main <filename>howtos/howtos.xml</filename> file, so
	the chunks you write must not be standalone. The parent element you need
	to use is the XML's &lt;chapter&gt; tag, without any XML document type.
	Existing HOW-TOs provide excellent quickstarts.
	</para>
</sect2>

<sect2>
	<title>Symbols</title>
	<para>
	Symbols are a little different. In general, the symbol refentry pages
	already contain all the fields, you only need to provide contents for
	them. To minimize overhead, fields have some default headers and footers
	which you then can (and, in fact, must) omit from your chunks.
	</para>
	<para>
	You can also create more sections that begin with the same name, and
	are then appended one after another. This is most suitable
	for examples, so see <xref linkend='Example'/>.
	</para>
	<para>
	In general, all files are handled generically and will be included
	if you name them after the appropriate refentry page section that you want
	to modify. Keep in mind that all files (other than the "strong" 
	<filename>control</filename> one, which is available with multi-file
	method only) append instead of overriding existing
	information.
	</para>

	<sect3>
		<title>control</title>
		<para>
		The <filename>control</filename> file contains "key: value" pairs
		on each line. Comments (#....) can be used at the beginning of the line.
		Otherwise, 'value's are left-trimmed and then recorded <literal>verbatim
		</literal>.
		</para>
		<para>
		Note that the values in this file override (do not append!)
		information already known to the generator script (if any).
		</para>
		<para>
		"Keys" can be anything, but some of them have a special meaning (and
		defining any others makes no sense except for future functionality),
		and some of them must be specified because they have no useful
		defaults:

		<itemizedlist>
			<listitem><para>
				purpose: one-line description. No default, must be specified.
			</para></listitem>
			<listitem><para>
				default: default value. This is symbol-dependent (it makes sense
				with, for example, pragmas or global variables). For other symbols
				(say, tags), this is unused.
			</para></listitem>
			<listitem><para>
				missing: A free-form text that is appended to <filename>tmp/missing</filename> entry for a particular item. Good for a per-item TODO list and important notes. While <filename>tmp/missing</filename> is not empty, you must not feel bored :)
			</para></listitem>
			<listitem><para>
				author: specific symbol's/feature's author.
				ICDEVGROUP members are specified like "&amp;docelic;amp;,
				&amp;ICDEVGROUP;", where the username and ICDEVGROUP entities expand
				to a suitable
				strings (full name, and full team name with link currently - this
				is defined in <filename>docbook/literals.ent</filename>).
				If no author is
				specified, the default shows the team name, not mentioning any
				individual specifically.<sbr/>
				3rd party people need to be specified in the same way (
				name and email with optional group name), such as in a silly 
				example of "Mirko Star &lt;mstar@aol.com&gt;". If the person
				is expected to contribute more often, adding an entity in
				the <filename>literals</filename> for him/her is okay.
			</para></listitem>
			<listitem><para>
				ignore: Usually you specify it only if you want to ignore an item
				(cause it not to be autogenerated and visible). "ignore: yes" works
				fine.
			</para></listitem>
			<listitem><para>
				see also: very powerful feature. List related symbol names, system
				commands or other arbitrary items. Non-IC symbols listed get passed
				as-is, IC symbols get rendered with a clickable link to the item
				and the connection is automatically 2-way (if you mention "B" in 
				"A"'s See Also list, the B's list will automatically get A in its
				see also list).<sbr/>
				On items that begin with "&lt;" (that is, on those that seem to be
				formatted already), no special processing is done and are included
				verbatim.
			</para></listitem>
		</itemizedlist>
		</para>
	</sect3>

	<sect3>
		<title>synopsis</title>
		<para>
		The <filename>synopsis</filename> file needs to contain a block
		that depends on the symbol type being documented. Just copy an 
		existing one from the same symbol group.
		</para>
		<para>
		The synopsis must be provided, or the appropriate "missing"
		entry appears in <filename>tmp/missing</filename>.
		</para>
	</sect3>

	<sect3 id='Description'>
		<title>description</title>
		<para>
		This file is meant to contain prose and is pre-wrapped in 
		the &lt;para&gt; tag. If, for the purpose of your description, you
		need new paragraphs, simply use &lt;/para&gt;&lt;para&gt; to 
		separate them, but always omit the starting &lt;para&gt; and 
		ending &lt;/para&gt;.
		</para>
		<para>
		Note that this is only possible because our Perl scripts do the 
		merging before the source XML is passed to the XML tools; if XML
		tools had to deal with this directly, you'd get a "chunk not balanced"
		error and it wouldn't be possible (well, at least not without
		entities).
		</para>
		<para>
		The description must be provided, or the appropriate "missing"
		entry appears in <filename>tmp/missing</filename>.
		</para>
	</sect3>

	<sect3>
		<title>notes</title>
		<para>
		Same as <xref linkend='Description'/>. May be left empty.
		</para>
	</sect3>

	<sect3 id='Example'>
		<title>example*</title>
		<para>
		The example files must contain an &lt;example&gt; element (which 
		usually contains the &lt;title&gt;, short &lt;para&gt; with description
		and &lt;programlisting&gt; with the actual code or syntax to be shown).
		</para>
		<para>
		It is possible (and welcomed) to have multiple example files. They will
		all be added as separate examples, and their order in the documentation
		will be dictated by their alphabetical order on the filesystem
		(the order in which readdir() reads them). Simply name additional files
		following the regex: /example[\-\.\+_:\d].*/.
		</para>
		<para>
		At least one example must be provided, or the appropriate "missing"
		entry appears in <filename>tmp/missing</filename>.
		</para>
	</sect3>
		
</sect2>

<sect2>
	<title>Glossary</title>
	<para>
	The glossary skeleton is autogenerated. All you need to do is place
	items in the <filename class='directory'>glossary/</filename>
	directory. Each file there (filename is irrelevant) must contain a
	valid &lt;glossentry&gt; element. See <filename>glossary/pragma</filename>
	for an example.
	</para>
</sect2>

</sect1>

</article>
-->
