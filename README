
The Interchange Development Group
http://www.icdevgroup.org

ICDEVGROUP Documentation Set
http://www.icdevgroup.org/cgi-bin/cvsweb/xmldocs/


INTRODUCTION

The (new) Interchange XML documentation set is completely self-contained.
To build the complete documentation set, run:

  make

To build specific targets, see Makefile for target names. Few useful
targets would include:

  make guides
  make refs

  make OUTPUT/iccattut.html
  make OUTPUT/iccattut
  make OUTPUT/iccattut.man

  make OUTPUT/xmldocs.css
  make tmp/refs-autogen
  make tmp/olinkdbs


PREREQUISITES

To perform a successful build, the following programs and modules
must be available:

  - Perl
  - Shell commands: mkdir, cp, tar, gzip, bzip2
  - docbook-xml
  - docbook-xsl
  - xsltproc
  - xmlto
  - exuberant-ctags
  - passivetex (for FO output - ps, pdf, ...) (not used yet)


FINAL OUTPUT

During the invocation of 'make', few files will be created:
  
  tmp/*.db       - OLink DB files generated from source .xml files,
                   and other temporary files.

  cache/<ver>/*  - Various Interchange source tree statistics, available
                   over a filesystem interface. (For XInclusion in .xml
                   sources and similar purposes). The files are generated
                   from cache/<ver>/.cache.bin.
                   .cache.bin itself is generated by bin/stattree, the files
                   from it are created by bin/mkreport.

                   The cache is Perl's portable Storable dump, and is only
                   a convenience. If the binary is incompatible for you,
                   simply get Interchange sources and run bin/stattree yourself.
  
  OUTPUT/        - Autogenerated:
                   directory containing the actual completely self-contained
                   and interlinked documentation set. Once it's created, you
                   can move it out of the build tree and package as you see
                   fit.


DEVELOPMENT NOTES

 The directory structure:
   Makefile      - Main Makefile
   bin           - Helper tools
   cache         - Interchange source trees metadata
   docbook       - DocBook XML support files
   files         - Support files, such as downloadable examples etc.
   guides        - Collection of guides
   howtos        - Collection of howtos
   refs          - Collection of reference pages
   images        - All images
   tmp           - (not in CVS) Scratch and temporary file space
   pending       - A "pending" directory.
                   If you have a chunk which you'd like to integrate in
                   the docset, but don't have the time to prepare it
                   yourself, just drop it in there and someone will pick
                   it up.
   sources       - (not in CVS). If you create this directory, and fill it
                   in with subdirectories containing Interchange releases
                   (say, 4.8.0/, 5.0.0/, 5.2.0, cvs-head/), then you can 
                   use bin/stattree to generate the source tree information.
                   Both sources/ and its subdirectories can be symlinks.


 Updating cache/:
   The dotfiles found in cache/ can only be generated when the sources/
   directory is present as described above, and contains Interchange releases
   in directories named after release numbers (with the exception of
   "cvs-head").

   Once that's in place, make sure all available versions are mentioned in 
   Makefile's IC_VERSIONS variable, and then run 'make cache'.
   This will regenerate files for the versions you have.

   It is important to have as many releases as possible in sources/, because
   when you generate the documentation (reference pages most notably), the
   symbols there are considered "added" the first time they're encountered
   in the sources (so they'll appear more recent than they actually are).

   As this is only rarely done (only when the release changes due to an
   important backport or something - and even then it probably doesn't 
   change any figures because the updates are small), the generated dotfiles
   *are* kept in the CVS because they can be considered static.

   When bin/mkreport runs later, it parses the .cache.bin file and produces
   number of output files (interesting "leaf nodes" in a hash). Those 
   files are filesystem interface to tree-level statistics, and can be
   used in numerous ways, XInclude for example.


 The XML "preprocessor" tool:
   There's bin/pp tool which you can use to write XML more conveniently.
   See the script itself for usage notes.


 Autogeneration of the reference pages: ** IMPORTANT **
 Creation of new documentation parts:   ** IMPORTANT **

   When bin/stattree runs, it also collects information about all the "symbols"
   in the source it can find (symbols are anything: pragmas, global variables,
   functions, tags, ...). It collects the symbol names together with all files
   and line numbers (and few lines of context around them) where they
   appear. This is the first step of reference pages autogeneration.

   Some of the symbol information is derived from the source automatically;
   other parts must be added manually by us. 
   
   Let's take an example of "post_page" pragma (but the principle is the same
   for any symbol). User-supplied information is found in refs/<symbol>/
   directory. Information which is needed to consider a symbol documentation
   complete includes:

     - autogenerated:
        id, name, symbol type, availability, source occurences
     - could be user-supplied but has meaningful default:
        notes, bugs, authors, copyright
     - must be user-supplied because it only has placeholder defaults:
        purpose, synopsis, description, examples, see also

   All of those fields can both be overriden or appended with user-supplied
   information.
   
   To unconditionally override values and/or provide one-liner contents, use
   refs/<symbol>/control file. It has pretty much inflexible "field: content"
   line format, but # comments can be used.

   To append with information, you use refs/<symbol>/<X>, where <X> is
   the name of an existing section, maybe followed by an arbitrary string.
   With the exception of example files, you generally only create one
   file for each section.
   To supply more examples, you could keep them in an informal structure
   like this:
   refs/post_page/example
   refs/post_page/example2
     refs/post_page/example-relative_pages
     refs/post_page/example:used-often
     refs/post_page/example.something

   (also, nothing prevents you from having more <example>s in the same file
   if you like).

   You can't use # comments in the non-control files (they'd be left as-is),
   but you can use XML comments <!-- commented section -->.
   To avoid having to escape all HTML entities and everything, simply
   enclose "dirty" blocks in <![CDATA[ ... ]]>.

** To create the documentation for a yet non-existant item or modify an 
** existing item, simply run bin/editem <name>. It will create all the
** skeleton files, auto-let you edit the important files and do basic checks.

** When adding documentation entries, please favor QUALITY over QUANTITY.
** That means you should grep the whole CVS for ALL information about a 
** symbol (and supplement that with your own invaluable historical and
** technical information), and then write the item documentation that
** includes all that information.

** After you build the documentation, there will be a file named
** tmp/missing autogenerated, and it will contain a list of symbols with all
** the parts of the documentation they still miss for the item to be
** considered complete. Clearing out this list is a priority;
** given that the new system is so convenient and cool, you have no excuse ;-)


Davor Ocelic, docelic@icdevgroup.org

