
The Interchange Development Group
http://www.icdevgroup.org

ICDEVGROUP Documentation Set
http://www.icdevgroup.org/cgi-bin/cvsweb/xmldocs/

Documentation writing/authoring QuickStart.


INTRODUCTION

- The new documentation system (XMLDOCS) is based on DocBook XML
  (http://www.docbok.org/, http://www.sagehill.net/), and includes a
  custom processing layer to extenda DocBook set of elements and perform
  other tuning specific to our needs.

- To naturally understand why XMLDOCS looks the way it looks, and how the
  design decision were made, let's quote the ultimate goals of XMLDOCS:

  1) Use custom scripts to auto-generate *every possible bit* of documentation
     that can be autogenerated.
  2) At places where no autogeneration is possible, keep the ammount of
     manual documentation work required at an absolute minimum.

  The first point effectively makes the documentation base follow Interchange
  source code development effort in a timely manner with no user intervention.
  The second point makes writing documentation so easy and convenient that it
  becomes a natural part of the development, without any annyonying or time-
  consuming overhead.


BASICS

We use DocBook XML tools to transform our DocBook XML documentation sources
into a number of output formats. When the appropriate DocBook processor is
invoked[1], the XML source files must already be put together and wait ready
to be processed.

As we've said that our goal is to autogenerate as much XML as possible, it's
obvious that we do not keep the XML sources in the CVS. (That would be pretty
inflexible, make larger changes very inconvenient, and require daily fixes and
updates to the CVS).

Instead of the above, what we keep in the CVS are a number of documentation
snippets (only those parts that need to be written manually). We first rely on
the bin/stattree script to extract information from Interchange sources[2],
then on bin/*-autogen scripts to combine templates, mentioned stattree
information and our snippets into complete, valid XML sources.


The system separates documentation contents into 5 major groups:

 1 guides: prose-based documents that explain concepts and are intended to
 . be read from top to bottom.
 . Autogeneration of contents is obviously of little use here, so we directly
 . keep .xml sources in the CVS.
 . At (many) places where the external content needs to be included, we use
   xi:include, native DocBook feature.

 2 howto collection: relatively short documents that contain practical examples
 . and supporting technical explanation.
 . Some templating is possible here, so we keep individual HOW-TO snippets
 . (in XML format, minus standard headings which are included in the templates)
 . in the CVS, while they are put together in a single howtos.xml file by the
   bin/generic-autogen script.

 3 reference pages: short, completely on-topic and focused pages documenting
 . all types of symbols. (Symbols are "units" seen in Interchange source - 
 . tags, filters, pragmas, global/catalog variables, Perl functions, ...).
 . Enormous ammount of autogeneration and templating is possible here, and
 . we keep snippets in CVS (format is, again, XML with all kinds of headers
   and containers already included in templates so you can just focus on text).

 4 glossary: prose-based collection of glossary items.
 . Some templating is possible here, so we keep individual glossary snippets
 . (in XML format, minus standard headings which are included in the templates)
 . in the CVS, while they are put together in a single glossary.xml file by the
   bin/generic-autogen script.

 5 whatsnew file: there's a bin/whatsnew-update script that takes care of
 . automatic whatsnew file updates.
 . The .xml file is directly kept in the CVS, while bin/whatsnew-update knows
 . how to update it; you only need to check in to CVS.
 . More information on this can be found in bin/whatsnew-update and
   whatsnew/whatsnew.xml.


Davor Ocelic, docelic@icdevgroup.org


[ 1]: We use xsltproc, a C-based implementation of the XSL processor.
      It is much faster than any of the two alternatives, which are both
      written in Java. Unfortunately, due to the nature of DocBook, processing
      is still visually slow.

[ 2]: Read about the intention and structure of the sources/ directory in the
      README file.

